//frontend/src/app/candidates/page.tsx
import CandidatesDashboard from '@/components/CandidatesDashboard';

export default function CandidatesPage() {
  return <CandidatesDashboard />;
}

//frontend/src/app/create-position/page.tsx
import CreatePosition from '@/components/CreatePosition';

export default function CreatePositionPage() {
  return <CreatePosition />;
}

//frontend/src/app/create-template/page.tsx
import CreateTemplate from '@/components/CreateTemplate';

export default function CreateTemplatePage() {
  return <CreateTemplate />;
}

//frontend/src/app/dashboard/page.tsx
import Dashboard from '@/components/Dashboard';

export default function DashboardPage() {
  return <Dashboard />;
}

//frontend/src/app/edit-position/[positionId]/page.tsx
import EditPosition from '@/components/EditPosition';

export default async function EditPositionPage({ params }: { params: Promise<{ positionId: string }> }) {
  const { positionId } = await params;
  return <EditPosition positionId={positionId} />;
}

//frontend/src/app/edit-template/[templateID]/page.tsx
import EditTemplate from '@/components/EditTemplate';

export default async function EditTemplatePage({ params }: { params: Promise<{ templateId: string }> }) {
  const { templateId } = await params;
  
  return <EditTemplate templateId={templateId} />;
}

//frontend/src/app/interview/[sessionId]/page.tsx
import CandidateInterview from '@/components/CandidateInterview';

export default async function InterviewPage({ params }: { params: Promise<{ sessionId: string }> }) {
  const { sessionId } = await params;
  
  return <CandidateInterview sessionId={sessionId} />;
}

//frontend/src/app/positions/page.tsx
import PositionDashboard from '@/components/PositionDashboard';

export default function PositionsPage() {
  return <PositionDashboard />;
}

//frontend/src/app/review/[sessionId]/page.tsx
import VideoReviewInterface from '@/components/VideoReviewInterface';

export default async function SessionReviewPage({ params }: { params: Promise<{ sessionId: string }> }) {
  const { sessionId } = await params;
  
  return (
    <div className="p-8">
      <VideoReviewInterface sessionId={sessionId} />
    </div>
  );
}

//frontend/src/app/review/page.tsx
import VideoReviewDashboard from '@/components/VideoReviewDashboard';

export default function ReviewPage() {
  return <VideoReviewDashboard />;
}

/*frontend/src/app/globals.css*/
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}


@font-face {
  font-family: 'Tempo Std Heavy Condensed';
  src: url('/fonts/TempoStd-HeavyCondensed.otf') format('opentype');
  font-weight: 800;
  font-style: normal;
  font-display: swap;
}

.tempo-font {
  font-family: 'Tempo Std Heavy Condensed', 'Arial Black', sans-serif;
  font-weight: 800;
  letter-spacing: -0.025em;
}

//frontend/src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

//frontend/src/app/page.tsx
import LoginPage from '../components/LoginPage';

export default function Home() {
  return <LoginPage />;
}

"use client"
import React, { useState, useEffect } from 'react';
import { Clock, CheckCircle, AlertCircle, Play, Ship, Anchor } from 'lucide-react';
import VideoRecorder from './VideoRecorder';

interface Question {
  id: string;
  question_text: string;
  time_limit: number;
  question_order: number;
}

interface Template {
  id: string;
  title: string;
  description: string;
}

interface Session {
  id: string;
  template_id: string;
  candidate_email: string;
  candidate_name: string;
  status: string;
  expires_at: string;
}

interface InterviewData {
  session: Session;
  template: Template;
  questions: Question[];
}

export default function CandidateInterview({ sessionId }: { sessionId: string }) {
  const [interviewData, setInterviewData] = useState<InterviewData | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [completedQuestions, setCompletedQuestions] = useState<Set<number>>(new Set());
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [isStarted, setIsStarted] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);

  useEffect(() => {
    fetchInterviewData();
  }, [sessionId]);

  // Auto-navigate to first unanswered question after loading data
  useEffect(() => {
    if (interviewData && isStarted) {
      findFirstUnansweredQuestion();
      loadCompletedQuestions();
    }
  }, [interviewData, isStarted]);

  const fetchInterviewData = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}`);
      
      if (response.ok) {
        const data = await response.json();
        setInterviewData(data);
        
        // Check if session has expired
        if (new Date() > new Date(data.session.expires_at)) {
          setError('This interview session has expired.');
        }
      } else if (response.status === 404) {
        setError('Interview session not found.');
      } else if (response.status === 410) {
        setError('This interview session has expired.');
      } else {
        setError('Failed to load interview data.');
      }
    } catch (error) {
      setError('Network error. Please check your connection.');
    } finally {
      setIsLoading(false);
    }
  };

  const startInterview = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/start`, {
        method: 'POST',
      });
      
      if (response.ok) {
        setIsStarted(true);
      }
    } catch (error) {
      console.error('Failed to start interview:', error);
    }
  };

  const findFirstUnansweredQuestion = async () => {
    if (!interviewData) return;

    for (let i = 0; i < interviewData.questions.length; i++) {
      const questionId = interviewData.questions[i].id;
      
      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/question/${questionId}/progress`
        );
        
        if (response.ok) {
          const data = await response.json();
          if (!data.isCompleted) {
            setCurrentQuestionIndex(i);
            return; // Stop at first unanswered question
          }
        }
      } catch (error) {
        console.error('Error checking question progress:', error);
      }
    }
    
    // If all questions are completed, check if interview should be marked complete
    if (interviewData.questions.length > 0) {
      completeInterview();
    }
  };

  const loadCompletedQuestions = async () => {
    if (!interviewData) return;

    const completed = new Set<number>();
    
    for (let i = 0; i < interviewData.questions.length; i++) {
      const questionId = interviewData.questions[i].id;
      
      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/question/${questionId}/progress`
        );
        
        if (response.ok) {
          const data = await response.json();
          if (data.isCompleted) {
            completed.add(i);
          }
        }
      } catch (error) {
        console.error('Error loading question completion:', error);
      }
    }
    
    setCompletedQuestions(completed);
  };

  const handleVideoComplete = (blob: Blob) => {
    // Mark current question as completed
    setCompletedQuestions(prev => new Set(prev).add(currentQuestionIndex));
    
    // TODO: Upload video to backend
    console.log('Video completed for question:', currentQuestionIndex + 1);
    console.log('Video blob size:', blob.size);
  };

  const handleNextQuestion = () => {
    if (!interviewData) return;
    
    if (currentQuestionIndex < interviewData.questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // Interview completed
      completeInterview();
    }
  };

  const completeInterview = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/complete`, {
        method: 'POST',
      });
      
      if (response.ok) {
        setIsCompleted(true);
      }
    } catch (error) {
      console.error('Failed to complete interview:', error);
    }
  };

  const formatTimeLimit = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    if (mins > 0) {
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    return `${secs} seconds`;
  };

  const getExpirationTime = () => {
    if (!interviewData) return '';
    const expiry = new Date(interviewData.session.expires_at);
    return expiry.toLocaleDateString() + ' at ' + expiry.toLocaleTimeString();
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125] mx-auto mb-4"></div>
          <p className="text-gray-600">Loading interview...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md mx-auto text-center">
          <AlertCircle className="mx-auto h-12 w-12 text-red-500 mb-4" />
          <h1 className="text-xl font-semibold text-gray-900 mb-2 tempo-font tracking-tight">
            UNABLE TO LOAD INTERVIEW
          </h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <p className="text-sm text-gray-500">
            Please contact the recruiter if you believe this is an error.
          </p>
        </div>
      </div>
    );
  }

  if (isCompleted) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md mx-auto text-center">
          <CheckCircle className="mx-auto h-16 w-16 text-green-500 mb-6" />
          <h1 className="text-2xl font-bold text-[#052049] mb-4 tempo-font tracking-tight">
            INTERVIEW COMPLETED!
          </h1>
          <p className="text-gray-600 mb-4">
            Thank you for completing your video interview. Your responses have been submitted successfully.
          </p>
          <p className="text-sm text-gray-500">
            The hiring team will review your responses and get back to you soon.
          </p>
          
          {/* Carnival Footer */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <div className="flex items-center justify-center space-x-4 text-[#052049]/60 text-sm">
              <Ship className="h-4 w-4" />
              <span className="tempo-font tracking-tight">CARNIVAL VIP RECRUITMENT</span>
              <Anchor className="h-4 w-4" />
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!interviewData) return null;

  const currentQuestion = interviewData.questions[currentQuestionIndex];
  const totalQuestions = interviewData.questions.length;
  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Carnival-Branded Header */}
      <header className="bg-[#052049] shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center">
              <Ship className="h-8 w-8 text-white mr-3" />
              <div>
                <h1 className="text-xl font-bold text-white tempo-font tracking-tight">
                  {interviewData.template.title.toUpperCase()}
                </h1>
                <p className="text-sm text-white/80">
                  Welcome, {interviewData.session.candidate_name}
                </p>
              </div>
            </div>
            <div className="text-right">
              <p className="text-sm text-white/90 tempo-font font-medium">
                Question {currentQuestionIndex + 1} of {totalQuestions}
              </p>
              <p className="text-xs text-white/70">
                Expires: {getExpirationTime()}
              </p>
            </div>
          </div>
          
          {/* Carnival-Branded Progress Bar */}
          <div className="mt-4">
            <div className="bg-white/20 rounded-full h-3 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-[#DC1125] to-[#10559A] h-3 rounded-full transition-all duration-500 ease-out shadow-sm"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <div className="flex justify-between mt-2 text-xs text-white/70">
              <span>Start</span>
              <span className="tempo-font font-medium">{Math.round(progress)}% Complete</span>
              <span>Finish</span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!isStarted ? (
          /* Carnival-Branded Welcome Screen */
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Welcome Header */}
            <div className="bg-gradient-to-r from-[#052049] to-[#10559A] text-white p-8 text-center">
              <div className="flex items-center justify-center mb-4">
                <Ship className="h-12 w-12 mr-3" />
                <Anchor className="h-12 w-12" />
              </div>
              <h2 className="text-3xl font-bold tempo-font tracking-tight mb-2">
                WELCOME TO YOUR VIP INTERVIEW
              </h2>
              <p className="text-white/90 text-lg">{interviewData.template.description}</p>
            </div>
            
            {/* Instructions */}
            <div className="p-8">
              <div className="bg-[#10559A]/10 border border-[#10559A]/20 rounded-lg p-6 mb-6">
                <h3 className="text-lg font-bold text-[#052049] mb-4 tempo-font tracking-tight flex items-center">
                  <CheckCircle className="h-5 w-5 mr-2 text-[#10559A]" />
                  BEFORE YOU BEGIN
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <ul className="space-y-3 text-gray-700">
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#DC1125] rounded-full mr-3"></div>
                      Ensure you have a stable internet connection
                    </li>
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#DC1125] rounded-full mr-3"></div>
                      Find a quiet, well-lit space
                    </li>
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#DC1125] rounded-full mr-3"></div>
                      Allow camera and microphone access
                    </li>
                  </ul>
                  <ul className="space-y-3 text-gray-700">
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#10559A] rounded-full mr-3"></div>
                      You'll have {totalQuestions} questions to answer
                    </li>
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#10559A] rounded-full mr-3"></div>
                      Each question has a specific time limit
                    </li>
                    <li className="flex items-center">
                      <div className="w-2 h-2 bg-[#10559A] rounded-full mr-3"></div>
                      You can re-record each answer once
                    </li>
                  </ul>
                </div>
              </div>

              {/* Professional Stats */}
              <div className="grid grid-cols-3 gap-4 mb-8">
                <div className="text-center p-4 bg-[#052049]/5 rounded-lg border border-[#052049]/10">
                  <div className="text-2xl font-bold text-[#052049] tempo-font">{totalQuestions}</div>
                  <div className="text-sm text-gray-600">Questions</div>
                </div>
                <div className="text-center p-4 bg-[#DC1125]/5 rounded-lg border border-[#DC1125]/10">
                  <div className="text-2xl font-bold text-[#DC1125] tempo-font">
                    {Math.round(interviewData.questions.reduce((acc, q) => acc + q.time_limit, 0) / 60)}
                  </div>
                  <div className="text-sm text-gray-600">Est. Minutes</div>
                </div>
                <div className="text-center p-4 bg-[#10559A]/5 rounded-lg border border-[#10559A]/10">
                  <div className="text-2xl font-bold text-[#10559A] tempo-font">24</div>
                  <div className="text-sm text-gray-600">Hours to Complete</div>
                </div>
              </div>

              <div className="text-center">
                <button
                  onClick={startInterview}
                  className="tempo-font inline-flex items-center px-8 py-4 border border-transparent text-lg font-bold rounded-lg text-white bg-gradient-to-r from-[#DC1125] to-[#052049] hover:from-[#052049] hover:to-[#DC1125] transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  <Play className="w-6 h-6 mr-3" />
                  START VIP INTERVIEW
                </button>
              </div>
            </div>
          </div>
        ) : (
          /* Interview Questions with Carnival Branding */
          <div className="space-y-6">
            {/* Question Info Card */}
            <div className="bg-white rounded-lg shadow-lg overflow-hidden">
              <div className="bg-gradient-to-r from-[#10559A] to-[#052049] text-white p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold tempo-font tracking-tight">
                    QUESTION {currentQuestionIndex + 1}
                  </h2>
                  <div className="flex items-center text-sm bg-white/20 px-3 py-1 rounded-full">
                    <Clock className="w-4 h-4 mr-1" />
                    {formatTimeLimit(currentQuestion.time_limit)} to answer
                  </div>
                </div>
                
                <div className="bg-white/10 border border-white/20 rounded-lg p-4">
                  <p className="text-lg text-white leading-relaxed">{currentQuestion.question_text}</p>
                </div>
              </div>
            </div>

            {/* Video Recorder */}
            <VideoRecorder
              sessionId={sessionId}
              questionId={currentQuestion.id}
              questionText={currentQuestion.question_text}
              timeLimit={currentQuestion.time_limit}
              onRecordingComplete={handleVideoComplete}
              onNext={handleNextQuestion}
            />

            {/* Question Navigation */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-bold text-[#052049] tempo-font tracking-tight">
                  INTERVIEW PROGRESS
                </h3>
                <span className="text-xs text-gray-500">
                  {completedQuestions.size} of {totalQuestions} completed
                </span>
              </div>
              <div className="flex flex-wrap gap-2">
                {interviewData.questions.map((_, index) => (
                  <div
                    key={index}
                    className={`w-10 h-10 rounded-lg flex items-center justify-center text-sm font-bold tempo-font transition-all duration-200 ${
                      completedQuestions.has(index)
                        ? 'bg-green-100 text-green-800 border-2 border-green-300'
                        : index === currentQuestionIndex
                        ? 'bg-gradient-to-br from-[#DC1125] to-[#052049] text-white shadow-lg scale-110'
                        : 'bg-gray-100 text-gray-500 border-2 border-gray-200'
                    }`}
                  >
                    {completedQuestions.has(index) ? (
                      <CheckCircle className="w-5 h-5" />
                    ) : (
                      index + 1
                    )}
                  </div>
                ))}
              </div>
              
              {/* Progress Summary */}
              <div className="mt-4 p-3 bg-[#10559A]/5 rounded-lg">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Progress:</span>
                  <span className="font-medium text-[#052049] tempo-font">
                    {completedQuestions.size}/{totalQuestions} Questions Complete
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// frontend/src/components/CandidatesDashboard.tsx
"use client"
import React, { useState, useEffect } from 'react';
import UnifiedHeader from './UnifiedHeader';
import { Users, Eye, Calendar, Clock, Mail, CheckCircle, AlertCircle, Filter, X, Search, ArrowUpDown, ChevronUp, ChevronDown, ChevronLeft, ChevronRight } from 'lucide-react';

interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
}

interface SessionSummary {
  id: string;
  candidateName: string;
  candidateEmail: string;
  status: string;
  videosSubmitted: number;
  totalQuestions: number;
  createdAt: string;
  interviewTitle: string;
  templateId: string;
  sessionId: string;
  averageRating: number | null;
  sourceType: 'template' | 'position'; // To distinguish template vs position sessions
  sourceId: string;
}

type SortDirection = 'asc' | 'desc' | null;

interface SortConfig {
  key: string;
  direction: SortDirection;
}

interface DateRange {
  startDate: string;
  endDate: string;
}

export default function CandidatesDashboard() {
  const [user, setUser] = useState<User | null>(null);
  const [allSessions, setAllSessions] = useState<SessionSummary[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  
  // Filtering and search state
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sourceFilter, setSourceFilter] = useState('all'); // template vs position filter
  const [dateRange, setDateRange] = useState<DateRange>({ startDate: '', endDate: '' });
  const [showFilters, setShowFilters] = useState(false);
  
  // Sorting state
  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'createdAt', direction: 'desc' });
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 15;

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      setUser(JSON.parse(userData));
    }
    fetchAllSessions();
  }, []);

  const fetchAllSessions = async () => {
  try {
    const token = localStorage.getItem('authToken');
    
    // Fetch both template sessions and position sessions
    const [templateSessionsResponse, positionSessionsResponse] = await Promise.all([
      fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions`, {
        headers: { 'Authorization': `Bearer ${token}` }
      }),
      fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions/sessions`, {
        headers: { 'Authorization': `Bearer ${token}` }
      }).catch(() => ({ ok: false, json: () => Promise.resolve([]) })) // Handle if endpoint doesn't exist
    ]);

    // Parse responses with proper error handling
    const templateSessions = templateSessionsResponse.ok 
      ? await templateSessionsResponse.json() 
      : [];
    
    const positionSessions = positionSessionsResponse.ok 
      ? await positionSessionsResponse.json() 
      : [];

    // Combine and format sessions
    const combinedSessions = [
      ...templateSessions.map((session: any) => ({
        id: session.id,
        candidateName: session.candidateName,
        candidateEmail: session.candidateEmail,
        status: session.status,
        videosSubmitted: session.videosSubmitted || 0,
        totalQuestions: session.totalQuestions || 0,
        createdAt: session.createdAt,
        interviewTitle: session.interviewTitle,
        templateId: session.templateId,
        sessionId: session.id,
        averageRating: null,
        sourceType: 'template' as const,
        sourceId: session.templateId
      })),
      ...positionSessions.map((session: any) => ({
        id: session.id,
        candidateName: session.candidateName,
        candidateEmail: session.candidateEmail,
        status: session.status,
        videosSubmitted: session.videosSubmitted || 0,
        totalQuestions: session.totalQuestions || 0,
        createdAt: session.createdAt,
        interviewTitle: session.positionTitle || session.interviewTitle,
        templateId: session.templateId,
        sessionId: session.id,
        averageRating: null,
        sourceType: 'position' as const,
        sourceId: session.positionId
      }))
    ];

    setAllSessions(combinedSessions);
  } catch (error) {
    setError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
  } finally {
    setIsLoading(false);
  }
};

  // Sorting function
  const handleSort = (key: string) => {
    let direction: SortDirection = 'asc';
    if (sortConfig.key === key) {
      if (sortConfig.direction === 'asc') direction = 'desc';
      else if (sortConfig.direction === 'desc') direction = null;
      else direction = 'asc';
    }
    
    setSortConfig({ key, direction });
    setCurrentPage(1); // Reset pagination when sorting
  };

  const getSortIcon = (key: string) => {
    if (sortConfig.key !== key) {
      return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
    }
    if (sortConfig.direction === 'asc') {
      return <ChevronUp className="w-4 h-4 text-[#DC1125]" />;
    }
    if (sortConfig.direction === 'desc') {
      return <ChevronDown className="w-4 h-4 text-[#DC1125]" />;
    }
    return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
  };

  // Filtering and sorting logic
  const getFilteredAndSortedSessions = () => {
    let filtered = [...allSessions];

    // Apply filters
    if (statusFilter !== 'all') {
      filtered = filtered.filter(session => {
        if (statusFilter === 'completed') {
          return session.status === 'completed' || session.videosSubmitted === session.totalQuestions;
        }
        if (statusFilter === 'in_progress') {
          return session.status === 'in_progress' && session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
        }
        if (statusFilter === 'pending') {
          return session.status === 'pending' || session.videosSubmitted === 0;
        }
        return session.status === statusFilter;
      });
    }

    // Source filter (template vs position)
    if (sourceFilter !== 'all') {
      filtered = filtered.filter(session => session.sourceType === sourceFilter);
    }

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(session => 
        session.candidateName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.candidateEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.interviewTitle.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Date range filter
    if (dateRange.startDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) >= new Date(dateRange.startDate)
      );
    }
    if (dateRange.endDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) <= new Date(dateRange.endDate + 'T23:59:59')
      );
    }

    // Apply sorting
    if (sortConfig.direction) {
      filtered.sort((a, b) => {
        let aValue: any = a[sortConfig.key as keyof SessionSummary];
        let bValue: any = b[sortConfig.key as keyof SessionSummary];

        if (sortConfig.key === 'createdAt') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        } else if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (sortConfig.direction === 'asc') {
          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
        } else {
          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
        }
      });
    }

    return filtered;
  };

  // Pagination logic
  const getPaginatedData = (data: SessionSummary[]) => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return {
      data: data.slice(startIndex, endIndex),
      totalPages: Math.ceil(data.length / itemsPerPage),
      totalItems: data.length
    };
  };

  const getStatusBadge = (session: SessionSummary) => {
    const completed = session.videosSubmitted === session.totalQuestions && session.totalQuestions > 0;
    const inProgress = session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
    
    if (completed) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 tempo-font">COMPLETED</span>;
    } else if (inProgress) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800 tempo-font">IN PROGRESS</span>;
    } else {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800 tempo-font">PENDING</span>;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const SortableHeader = ({ label, sortKey }: { label: string; sortKey: string }) => (
    <th className="px-6 py-3 text-left text-xs font-bold text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors tempo-font">
      <button
        onClick={() => handleSort(sortKey)}
        className="flex items-center space-x-1 w-full text-left"
      >
        <span>{label}</span>
        {getSortIcon(sortKey)}
      </button>
    </th>
  );

  const filteredSessions = getFilteredAndSortedSessions();
  const paginatedData = getPaginatedData(filteredSessions);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader currentPage="candidates" user={user} />
        <div className="flex items-center justify-center py-20">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <UnifiedHeader currentPage="candidates" user={user} />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Carnival-Styled Filters */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-4 border-b border-gray-200 bg-[#10559A]">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-bold text-white tempo-font tracking-tight">CANDIDATE FILTERS</h3>
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="inline-flex items-center px-3 py-2 border border-white/30 shadow-sm text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 tempo-font transition-colors"
              >
                <Filter className="w-4 h-4 mr-2" />
                {showFilters ? 'HIDE FILTERS' : 'SHOW FILTERS'}
              </button>
            </div>
          </div>

          {showFilters && (
            <div className="p-6 space-y-4">
              {/* Search Bar */}
              <div>
                <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                  SEARCH CANDIDATES
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Search by name, email, or interview title..."
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                {/* Status Filter */}
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    STATUS
                  </label>
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  >
                    <option value="all">All Status</option>
                    <option value="completed">Completed</option>
                    <option value="in_progress">In Progress</option>
                    <option value="pending">Pending</option>
                  </select>
                </div>

                {/* Source Filter */}
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    SOURCE
                  </label>
                  <select
                    value={sourceFilter}
                    onChange={(e) => setSourceFilter(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  >
                    <option value="all">All Sources</option>
                    <option value="template">Templates</option>
                    <option value="position">Positions</option>
                  </select>
                </div>

                {/* Date Range */}
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    START DATE
                  </label>
                  <input
                    type="date"
                    value={dateRange.startDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    END DATE
                  </label>
                  <input
                    type="date"
                    value={dateRange.endDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  />
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Candidates Table */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200 bg-[#052049]">
            <h2 className="text-2xl font-bold text-white tempo-font tracking-tight">
              ALL CANDIDATES ({filteredSessions.length})
            </h2>
          </div>
          
          {error && (
            <div className="p-6 bg-red-50 border-b border-red-200">
              <span className="text-sm text-red-700">{error}</span>
            </div>
          )}

          {paginatedData.data.length === 0 ? (
            <div className="text-center py-12">
              <Users className="mx-auto h-12 w-12 text-[#DC1125]/60" />
              <h3 className="mt-2 text-lg font-bold text-[#052049] tempo-font tracking-tight">
                NO CANDIDATES FOUND
              </h3>
              <p className="mt-1 text-sm text-gray-500">
                {filteredSessions.length === 0 && allSessions.length === 0 
                  ? "No candidates have been invited yet."
                  : "Try adjusting your search or filter criteria."
                }
              </p>
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <SortableHeader label="CANDIDATE" sortKey="candidateName" />
                      <SortableHeader label="STATUS" sortKey="status" />
                      <SortableHeader label="INTERVIEW DATE" sortKey="createdAt" />
                      <SortableHeader label="POSITION" sortKey="interviewTitle" />
                      <SortableHeader label="SOURCE" sortKey="sourceType" />
                      <SortableHeader label="PROGRESS" sortKey="videosSubmitted" />
                      <th className="px-6 py-3 text-right text-xs font-bold text-gray-500 uppercase tracking-wider tempo-font">ACTIONS</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedData.data.map((session) => (
                      <tr key={session.id} className="hover:bg-[#10559A]/5 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-bold text-[#052049] tempo-font">{session.candidateName}</div>
                            <div className="text-sm text-gray-500">{session.candidateEmail}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {getStatusBadge(session)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          {formatDate(session.createdAt)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">{session.interviewTitle}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-bold rounded-full tempo-font ${
                            session.sourceType === 'template' 
                              ? 'bg-[#10559A]/10 text-[#10559A] border border-[#10559A]/20'
                              : 'bg-[#DC1125]/10 text-[#DC1125] border border-[#DC1125]/20'
                          }`}>
                            {session.sourceType.toUpperCase()}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-bold text-gray-900 tempo-font">
                            {session.videosSubmitted}/{session.totalQuestions} VIDEOS
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => window.location.href = `/review/${session.sessionId}`}
                            className="tempo-font text-[#10559A] hover:text-[#052049] font-bold transition-colors"
                            disabled={session.videosSubmitted === 0}
                          >
                            {session.videosSubmitted > 0 ? 'REVIEW' : 'NO VIDEOS'}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              {/* Pagination */}
              <div className="flex items-center justify-between px-6 py-3 bg-white border-t border-gray-200">
                <div className="flex-1 flex justify-between sm:hidden">
                  <button
                    onClick={() => setCurrentPage(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(currentPage + 1)}
                    disabled={currentPage === paginatedData.totalPages}
                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Next
                  </button>
                </div>
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700 tempo-font">
                      Showing <span className="font-bold text-[#052049]">{((currentPage - 1) * itemsPerPage) + 1}</span> to{' '}
                      <span className="font-bold text-[#052049]">{Math.min(currentPage * itemsPerPage, paginatedData.totalItems)}</span> of{' '}
                      <span className="font-bold text-[#052049]">{paginatedData.totalItems}</span> candidates
                    </p>
                  </div>
                  <div>
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                      <button
                        onClick={() => setCurrentPage(currentPage - 1)}
                        disabled={currentPage === 1}
                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronLeft className="h-5 w-5" />
                      </button>
                      
                      {Array.from({ length: Math.min(paginatedData.totalPages, 5) }, (_, i) => {
                        const page = i + 1;
                        return (
                          <button
                            key={page}
                            onClick={() => setCurrentPage(page)}
                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-bold tempo-font ${
                              page === currentPage
                                ? 'z-10 bg-[#DC1125] border-[#DC1125] text-white'
                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                            }`}
                          >
                            {page}
                          </button>
                        );
                      })}
                      
                      <button
                        onClick={() => setCurrentPage(currentPage + 1)}
                        disabled={currentPage === paginatedData.totalPages}
                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronRight className="h-5 w-5" />
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

// frontend/src/components/CreatePosition.tsx
"use client"
import React, { useState, useEffect } from 'react';
import { ArrowLeft, Plus, Trash2, Clock, Save, AlertCircle, Tag, Star, MapPin, ChevronDown } from 'lucide-react';

interface Template {
  id: string;
  title: string;
  description: string;
  created_at: string;
  is_active: boolean;
}

interface TemplateDetail {
  id: string;
  title: string;
  description: string;
  questions: TemplateQuestion[];
  keywords: TemplateKeyword[];
}

interface TemplateQuestion {
  id: string;
  question_text: string;
  time_limit: number;
  question_order: number;
}

interface TemplateKeyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

interface Question {
  id: string;
  text: string;
  timeLimit: number;
}

interface Keyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

export default function CreatePosition() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [selectedTemplateId, setSelectedTemplateId] = useState('');
  const [questions, setQuestions] = useState<Question[]>([]);
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  
  // Template state
  const [templates, setTemplates] = useState<Template[]>([]);
  const [isLoadingTemplates, setIsLoadingTemplates] = useState(true);
  const [isLoadingTemplateDetail, setIsLoadingTemplateDetail] = useState(false);
  
  // Form state
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [activeTab, setActiveTab] = useState<'questions' | 'keywords'>('questions');

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setTemplates(data.filter((t: Template) => t.is_active)); // Only show active templates
      } else {
        setError('Failed to load templates');
      }
    } catch (error) {
      setError('Network error loading templates');
    } finally {
      setIsLoadingTemplates(false);
    }
  };

  const loadTemplateData = async (templateId: string) => {
    if (!templateId) return;
    
    setIsLoadingTemplateDetail(true);
    try {
      const token = localStorage.getItem('authToken');
      
      // Get template details
      const templateResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      // Get template keywords
      const keywordsResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}/keywords`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      if (templateResponse.ok) {
        const templateData = await templateResponse.json();
        const keywordsData = keywordsResponse.ok ? await keywordsResponse.json() : { keywords: [] };
        
        // Populate position with template data (making copies for editing)
        if (!title) {
          setTitle(`${templateData.title} - Position`);
        }
        if (!description) {
          setDescription(templateData.description);
        }
        
        // Copy questions for position customization
        const positionQuestions = templateData.questions.map((q: TemplateQuestion, index: number) => ({
          id: `pos-${Date.now()}-${index}`, // New IDs for position
          text: q.question_text,
          timeLimit: q.time_limit
        }));
        setQuestions(positionQuestions);

        // Copy keywords for position customization
        const positionKeywords = keywordsData.keywords.map((k: TemplateKeyword, index: number) => ({
          id: `pos-${Date.now()}-${index}`, // New IDs for position
          keyword: k.keyword,
          category: k.category,
          weight: k.weight
        }));
        setKeywords(positionKeywords);
      }
    } catch (error) {
      setError('Failed to load template data');
    } finally {
      setIsLoadingTemplateDetail(false);
    }
  };

  const handleTemplateSelection = (templateId: string) => {
    setSelectedTemplateId(templateId);
    if (templateId) {
      loadTemplateData(templateId);
    } else {
      // Clear form if no template selected
      setQuestions([]);
      setKeywords([]);
    }
  };

  // Question management
  const addQuestion = () => {
    const newQuestion: Question = {
      id: `new-${Date.now()}`,
      text: '',
      timeLimit: 90
    };
    setQuestions([...questions, newQuestion]);
  };

  const removeQuestion = (id: string) => {
    if (questions.length > 1) {
      setQuestions(questions.filter(q => q.id !== id));
    }
  };

  const updateQuestion = (id: string, field: keyof Question, value: string | number) => {
    setQuestions(questions.map(q => 
      q.id === id ? { ...q, [field]: value } : q
    ));
  };

  // Keyword management
  const addKeyword = (newKeyword: string, category: string, weight: number) => {
    if (!newKeyword.trim()) return;
    
    const keyword: Keyword = {
      id: `new-${Date.now()}`,
      keyword: newKeyword.trim().toLowerCase(),
      category,
      weight
    };
    
    setKeywords([...keywords, keyword]);
  };

  const removeKeyword = (id: string) => {
    setKeywords(keywords.filter(k => k.id !== id));
  };

  const updateKeyword = (id: string, field: keyof Keyword, value: string | number) => {
    setKeywords(keywords.map(k => 
      k.id === id ? { ...k, [field]: value } : k
    ));
  };

  const handleSubmit = async () => {
    setError('');
    setSuccess('');

    // Validation
    if (!title.trim()) {
      setError('Position title is required');
      return;
    }

    if (!selectedTemplateId) {
      setError('Please select a template');
      return;
    }

    const validQuestions = questions.filter(q => q.text.trim() !== '');
    if (validQuestions.length === 0) {
      setError('At least one question is required');
      return;
    }

    setIsLoading(true);

    try {
      const token = localStorage.getItem('authToken');
      
      // Create position
      const positionResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          title: title.trim(),
          description: description.trim(),
          template_id: selectedTemplateId,
          questions: validQuestions.map(q => ({
            text: q.text.trim(),
            timeLimit: q.timeLimit
          })),
          keywords: keywords.map(k => ({
            keyword: k.keyword,
            category: k.category,
            weight: k.weight
          }))
        }),
      });

      const positionData = await positionResponse.json();

      if (!positionResponse.ok) {
        throw new Error(positionData.error || 'Failed to create position');
      }

      setSuccess('Position created successfully!');
      
      // Reset form
      setTitle('');
      setDescription('');
      setSelectedTemplateId('');
      setQuestions([]);
      setKeywords([]);
      
      // Redirect to positions dashboard
      setTimeout(() => {
        window.location.href = '/positions';
      }, 2000);

    } catch (error: any) {
      setError(error.message || 'Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical': return 'bg-blue-100 text-blue-800';
      case 'soft_skills': return 'bg-green-100 text-green-800';
      case 'experience': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical': return '🔧';
      case 'soft_skills': return '🤝';
      case 'experience': return '💼';
      default: return '📋';
    }
  };

  const goBack = () => {
    window.location.href = '/positions';
  };

  const keywordsByCategory = keywords.reduce((acc, keyword) => {
    if (!acc[keyword.category]) {
      acc[keyword.category] = [];
    }
    acc[keyword.category].push(keyword);
    return acc;
  }, {} as Record<string, Keyword[]>);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Carnival-Branded Header */}
      <header className="bg-[#052049] shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center h-16">
            <button
              onClick={goBack}
              className="flex items-center text-white hover:text-gray-300 mr-4 transition-colors"
            >
              <ArrowLeft className="h-5 w-5 mr-1" />
              Back to Positions
            </button>
            <h1 className="text-xl font-bold text-white tempo-font tracking-tight">
              CREATE JOB POSITION
            </h1>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow">
          <div className="p-6">
            {/* Position Details */}
            <div className="mb-8">
              <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                  POSITION DETAILS
                </h2>
              </div>
              
              <div className="p-6 space-y-4">
                {/* Template Selection */}
                <div>
                  <label htmlFor="template" className="block text-sm font-medium text-gray-700 mb-2">
                    Select Base Template *
                  </label>
                  {isLoadingTemplates ? (
                    <div className="flex items-center p-3 border border-gray-300 rounded-md bg-gray-50">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                      <span className="text-sm text-gray-500">Loading templates...</span>
                    </div>
                  ) : (
                    <div className="relative">
                      <select
                        id="template"
                        value={selectedTemplateId}
                        onChange={(e) => handleTemplateSelection(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125] appearance-none bg-white"
                      >
                        <option value="">Choose a template to start from...</option>
                        {templates.map(template => (
                          <option key={template.id} value={template.id}>
                            {template.title}
                          </option>
                        ))}
                      </select>
                      <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                    </div>
                  )}
                  {selectedTemplateId && (
                    <p className="mt-2 text-sm text-[#10559A]">
                      Questions and keywords from this template have been loaded and can be customized for this position.
                    </p>
                  )}
                </div>

                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    Position Title *
                  </label>
                  <input
                    id="title"
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="e.g., Senior Software Engineer - Miami Office"
                  />
                </div>

                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    Position Description
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Brief description of this specific position..."
                  />
                </div>
              </div>
            </div>

            {/* Show loading state when template is being loaded */}
            {isLoadingTemplateDetail && (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125] mx-auto mb-4"></div>
                <p className="text-gray-600">Loading template data...</p>
              </div>
            )}

            {/* Only show tabs if we have a template selected and loaded */}
            {selectedTemplateId && !isLoadingTemplateDetail && (
              <>
                {/* Tab Navigation */}
                <div className="mb-6">
                  <div className="border-b border-gray-200">
                    <nav className="-mb-px flex space-x-8">
                      <button
                        onClick={() => setActiveTab('questions')}
                        className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                          activeTab === 'questions'
                            ? 'border-[#DC1125] text-[#DC1125]'
                            : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                        }`}
                      >
                        QUESTIONS ({questions.length})
                      </button>
                      <button
                        onClick={() => setActiveTab('keywords')}
                        className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                          activeTab === 'keywords'
                            ? 'border-[#DC1125] text-[#DC1125]'
                            : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                        }`}
                      >
                        <Tag className="w-4 h-4 inline mr-1" />
                        AI KEYWORDS ({keywords.length})
                      </button>
                    </nav>
                  </div>
                </div>

                {/* Questions Tab */}
                {activeTab === 'questions' && (
                  <div className="mb-8">
                    <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                      <div className="flex justify-between items-center">
                        <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                          POSITION QUESTIONS
                        </h2>
                        <button
                          onClick={addQuestion}
                          className="tempo-font inline-flex items-center px-3 py-2 border border-white/30 text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors"
                        >
                          <Plus className="h-4 w-4 mr-1" />
                          ADD QUESTION
                        </button>
                      </div>
                      <p className="text-sm text-white/90 mt-2">
                        Customize questions for this specific position. Changes won't affect the original template.
                      </p>
                    </div>

                    <div className="p-6 space-y-4">
                      {questions.map((question, index) => (
                        <div key={question.id} className="border border-gray-200 rounded-lg p-4 hover:border-[#10559A]/30 transition-colors">
                          <div className="flex justify-between items-start mb-3">
                            <h3 className="text-sm font-medium text-gray-700 tempo-font">Question {index + 1}</h3>
                            {questions.length > 1 && (
                              <button
                                onClick={() => removeQuestion(question.id)}
                                className="text-[#DC1125] hover:text-red-700 transition-colors"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            )}
                          </div>

                          <div className="space-y-3">
                            <div>
                              <label className="block text-xs font-medium text-gray-600 mb-1">
                                Question Text *
                              </label>
                              <textarea
                                value={question.text}
                                onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                                rows={2}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                                placeholder="Enter your interview question..."
                              />
                            </div>

                            <div className="flex items-center space-x-2">
                              <Clock className="h-4 w-4 text-[#10559A]" />
                              <label className="text-xs font-medium text-gray-600">
                                Time Limit:
                              </label>
                              <select
                                value={question.timeLimit}
                                onChange={(e) => updateQuestion(question.id, 'timeLimit', parseInt(e.target.value))}
                                className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                              >
                                <option value={30}>30 seconds</option>
                                <option value={60}>1 minute</option>
                                <option value={90}>1.5 minutes</option>
                                <option value={120}>2 minutes</option>
                                <option value={180}>3 minutes</option>
                                <option value={300}>5 minutes</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Keywords Tab */}
                {activeTab === 'keywords' && (
                  <div className="mb-8">
                    <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                      <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                        AI KEYWORD MATCHING
                      </h2>
                      <p className="text-sm text-white/90 mt-2">
                        Customize keywords for this position. Changes won't affect the original template.
                      </p>
                    </div>

                    <div className="p-6">
                      {/* Keywords Display */}
                      {keywords.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <Tag className="w-8 h-8 mx-auto mb-2 text-[#10559A]/40" />
                          <p className="tempo-font text-[#052049] font-medium">NO KEYWORDS LOADED</p>
                          <p className="text-xs">Select a template above to load keywords for customization</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {Object.entries(keywordsByCategory).map(([category, categoryKeywords]) => (
                            <div key={category} className="border border-[#10559A]/20 rounded-lg p-4 bg-[#10559A]/5">
                              <h3 className="text-sm font-bold text-[#052049] mb-3 flex items-center tempo-font tracking-tight">
                                <span className="mr-2">{getCategoryIcon(category)}</span>
                                {category.replace('_', ' ').toUpperCase()} ({categoryKeywords.length})
                              </h3>
                              <div className="flex flex-wrap gap-2">
                                {categoryKeywords.map((keyword) => (
                                  <div
                                    key={keyword.id}
                                    className={`inline-flex items-center px-3 py-1 rounded-full text-sm border ${getCategoryColor(keyword.category)}`}
                                  >
                                    <span>{keyword.keyword}</span>
                                    {keyword.weight > 1 && (
                                      <span className="ml-1 flex items-center">
                                        <Star className="w-3 h-3 ml-1" />
                                        {keyword.weight}x
                                      </span>
                                    )}
                                    <button
                                      onClick={() => removeKeyword(keyword.id)}
                                      className="ml-2 text-current hover:text-red-600 transition-colors"
                                    >
                                      ×
                                    </button>
                                  </div>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </>
            )}

            {/* Messages */}
            {error && (
              <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-3 flex items-center">
                <AlertCircle className="h-4 w-4 text-red-400 mr-2" />
                <span className="text-sm text-red-700">{error}</span>
              </div>
            )}

            {success && (
              <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-3">
                <span className="text-sm text-green-700">{success}</span>
              </div>
            )}

            {/* Actions */}
            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSubmit}
                disabled={isLoading || !selectedTemplateId}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-[#DC1125] hover:bg-[#052049] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#DC1125] disabled:opacity-50 transition-colors"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    CREATING...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    CREATE POSITION
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


"use client"
import React, { useState } from 'react';
import { ArrowLeft, Plus, Trash2, Clock, Save, AlertCircle, Tag, Star } from 'lucide-react';

interface Question {
  id: string;
  text: string;
  timeLimit: number;
}

interface Keyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

export default function CreateTemplate() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [questions, setQuestions] = useState<Question[]>([
    { id: '1', text: '', timeLimit: 90 }
  ]);
  
  // Keywords state
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  const [newKeyword, setNewKeyword] = useState('');
  const [newKeywordCategory, setNewKeywordCategory] = useState('technical');
  const [newKeywordWeight, setNewKeywordWeight] = useState(1);
  
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [activeTab, setActiveTab] = useState<'questions' | 'keywords'>('questions');

  const addQuestion = () => {
    const newQuestion: Question = {
      id: Date.now().toString(),
      text: '',
      timeLimit: 90
    };
    setQuestions([...questions, newQuestion]);
  };

  const removeQuestion = (id: string) => {
    if (questions.length > 1) {
      setQuestions(questions.filter(q => q.id !== id));
    }
  };

  const updateQuestion = (id: string, field: keyof Question, value: string | number) => {
    setQuestions(questions.map(q => 
      q.id === id ? { ...q, [field]: value } : q
    ));
  };

  // Keyword management functions
  const addKeyword = () => {
    if (!newKeyword.trim()) return;
    
    const keyword: Keyword = {
      id: Date.now().toString(),
      keyword: newKeyword.trim().toLowerCase(),
      category: newKeywordCategory,
      weight: newKeywordWeight
    };
    
    setKeywords([...keywords, keyword]);
    setNewKeyword('');
    setNewKeywordWeight(1);
  };

  const removeKeyword = (id: string) => {
    setKeywords(keywords.filter(k => k.id !== id));
  };

  const updateKeyword = (id: string, field: keyof Keyword, value: string | number) => {
    setKeywords(keywords.map(k => 
      k.id === id ? { ...k, [field]: value } : k
    ));
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical':
        return 'bg-blue-100 text-blue-800';
      case 'soft_skills':
        return 'bg-green-100 text-green-800';
      case 'experience':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical':
        return '🔧';
      case 'soft_skills':
        return '🤝';
      case 'experience':
        return '💼';
      default:
        return '📋';
    }
  };

  const handleSubmit = async () => {
    setError('');
    setSuccess('');

    // Validation
    if (!title.trim()) {
      setError('Template title is required');
      return;
    }

    const validQuestions = questions.filter(q => q.text.trim() !== '');
    if (validQuestions.length === 0) {
      setError('At least one question is required');
      return;
    }

    setIsLoading(true);

    try {
      const token = localStorage.getItem('authToken');
      
      // Create template first
      const templateResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          title: title.trim(),
          description: description.trim(),
          questions: validQuestions.map(q => ({
            text: q.text.trim(),
            timeLimit: q.timeLimit
          }))
        }),
      });

      const templateData = await templateResponse.json();

      if (!templateResponse.ok) {
        throw new Error(templateData.error || 'Failed to create template');
      }

      // If we have keywords, save them too
      if (keywords.length > 0) {
        const keywordsResponse = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateData.template.id}/keywords`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({
              keywords: keywords.map(k => ({
                keyword: k.keyword,
                category: k.category,
                weight: k.weight
              }))
            }),
          }
        );

        if (!keywordsResponse.ok) {
          console.warn('Template created but keywords failed to save');
        }
      }

      setSuccess('Template created successfully!');
      
      // Reset form
      setTitle('');
      setDescription('');
      setQuestions([{ id: '1', text: '', timeLimit: 90 }]);
      setKeywords([]);
      
      // Redirect to dashboard after 2 seconds
      setTimeout(() => {
        window.location.href = '/dashboard';
      }, 2000);

    } catch (error: any) {
      setError(error.message || 'Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const goBack = () => {
    window.location.href = '/dashboard';
  };

  const keywordsByCategory = keywords.reduce((acc, keyword) => {
    if (!acc[keyword.category]) {
      acc[keyword.category] = [];
    }
    acc[keyword.category].push(keyword);
    return acc;
  }, {} as Record<string, Keyword[]>);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Carnival-Branded Header - SOLID NAVY */}
      <header className="bg-[#052049] shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center h-16">
            <button
              onClick={goBack}
              className="flex items-center text-white hover:text-gray-300 mr-4 transition-colors"
            >
              <ArrowLeft className="h-5 w-5 mr-1" />
              Back to Dashboard
            </button>
            <h1 className="text-xl font-bold text-white tempo-font tracking-tight">
              CREATE INTERVIEW TEMPLATE
            </h1>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow">
          <div className="p-6">
            {/* Template Details */}
            <div className="mb-8">
              <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                  TEMPLATE DETAILS
                </h2>
              </div>
              
              <div className="p-6 space-y-4">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    Template Title *
                  </label>
                  <input
                    id="title"
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="e.g., Software Engineer Interview"
                  />
                </div>

                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Brief description of this interview template..."
                  />
                </div>
              </div>
            </div>

            {/* Carnival-Branded Tab Navigation */}
            <div className="mb-6">
              <div className="border-b border-gray-200">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveTab('questions')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'questions'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    QUESTIONS ({questions.length})
                  </button>
                  <button
                    onClick={() => setActiveTab('keywords')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'keywords'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    <Tag className="w-4 h-4 inline mr-1" />
                    AI KEYWORDS ({keywords.length})
                  </button>
                </nav>
              </div>
            </div>

            {/* Questions Tab */}
            {activeTab === 'questions' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <div className="flex justify-between items-center">
                    <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                      INTERVIEW QUESTIONS
                    </h2>
                    <button
                      onClick={addQuestion}
                      className="tempo-font inline-flex items-center px-3 py-2 border border-white/30 text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors"
                    >
                      <Plus className="h-4 w-4 mr-1" />
                      ADD QUESTION
                    </button>
                  </div>
                </div>

                <div className="p-6 space-y-4">
                  {questions.map((question, index) => (
                    <div key={question.id} className="border border-gray-200 rounded-lg p-4 hover:border-[#10559A]/30 transition-colors">
                      <div className="flex justify-between items-start mb-3">
                        <h3 className="text-sm font-medium text-gray-700 tempo-font">Question {index + 1}</h3>
                        {questions.length > 1 && (
                          <button
                            onClick={() => removeQuestion(question.id)}
                            className="text-[#DC1125] hover:text-red-700 transition-colors"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        )}
                      </div>

                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            Question Text *
                          </label>
                          <textarea
                            value={question.text}
                            onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                            placeholder="Enter your interview question..."
                          />
                        </div>

                        <div className="flex items-center space-x-2">
                          <Clock className="h-4 w-4 text-[#10559A]" />
                          <label className="text-xs font-medium text-gray-600">
                            Time Limit:
                          </label>
                          <select
                            value={question.timeLimit}
                            onChange={(e) => updateQuestion(question.id, 'timeLimit', parseInt(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={30}>30 seconds</option>
                            <option value={60}>1 minute</option>
                            <option value={90}>1.5 minutes</option>
                            <option value={120}>2 minutes</option>
                            <option value={180}>3 minutes</option>
                            <option value={300}>5 minutes</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Keywords Tab */}
            {activeTab === 'keywords' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                    AI KEYWORD MATCHING
                  </h2>
                  <p className="text-sm text-white/90 mt-2">
                    Add keywords that you want to find in candidate responses. These will be used to automatically score candidates based on their speech.
                  </p>
                </div>

                <div className="p-6">
                  {/* Add New Keyword */}
                  <div className="bg-[#10559A]/10 border border-[#10559A]/20 rounded-lg p-4 mb-6">
                    <h3 className="text-sm font-medium text-[#052049] mb-3 tempo-font tracking-tight">ADD NEW KEYWORD</h3>
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
                      <div className="md:col-span-2">
                        <input
                          type="text"
                          value={newKeyword}
                          onChange={(e) => setNewKeyword(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          placeholder="Enter keyword or phrase..."
                          onKeyPress={(e) => e.key === 'Enter' && addKeyword()}
                        />
                      </div>
                      <div>
                        <select
                          value={newKeywordCategory}
                          onChange={(e) => setNewKeywordCategory(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                        >
                          <option value="technical">🔧 Technical</option>
                          <option value="soft_skills">🤝 Soft Skills</option>
                          <option value="experience">💼 Experience</option>
                          <option value="general">📋 General</option>
                        </select>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="flex items-center space-x-1">
                          <label className="text-xs text-gray-600">Weight:</label>
                          <select
                            value={newKeywordWeight}
                            onChange={(e) => setNewKeywordWeight(parseFloat(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={1}>1x</option>
                            <option value={2}>2x</option>
                            <option value={3}>3x</option>
                            <option value={5}>5x</option>
                          </select>
                        </div>
                        <button
                          onClick={addKeyword}
                          disabled={!newKeyword.trim()}
                          className="tempo-font px-3 py-2 bg-[#DC1125] text-white rounded-md text-sm font-bold hover:bg-[#052049] disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          ADD
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Keywords Display */}
                  {keywords.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <Tag className="w-8 h-8 mx-auto mb-2 text-[#10559A]/40" />
                      <p className="tempo-font text-[#052049] font-medium">NO KEYWORDS ADDED YET</p>
                      <p className="text-xs">Add keywords above to enable AI-powered candidate scoring</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {Object.entries(keywordsByCategory).map(([category, categoryKeywords]) => (
                        <div key={category} className="border border-[#10559A]/20 rounded-lg p-4 bg-[#10559A]/5">
                          <h3 className="text-sm font-bold text-[#052049] mb-3 flex items-center tempo-font tracking-tight">
                            <span className="mr-2">{getCategoryIcon(category)}</span>
                            {category.replace('_', ' ').toUpperCase()} ({categoryKeywords.length})
                          </h3>
                          <div className="flex flex-wrap gap-2">
                            {categoryKeywords.map((keyword) => (
                              <div
                                key={keyword.id}
                                className={`inline-flex items-center px-3 py-1 rounded-full text-sm border ${getCategoryColor(keyword.category)}`}
                              >
                                <span>{keyword.keyword}</span>
                                {keyword.weight > 1 && (
                                  <span className="ml-1 flex items-center">
                                    <Star className="w-3 h-3 ml-1" />
                                    {keyword.weight}x
                                  </span>
                                )}
                                <button
                                  onClick={() => removeKeyword(keyword.id)}
                                  className="ml-2 text-current hover:text-red-600 transition-colors"
                                >
                                  ×
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Messages */}
            {error && (
              <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-3 flex items-center">
                <AlertCircle className="h-4 w-4 text-red-400 mr-2" />
                <span className="text-sm text-red-700">{error}</span>
              </div>
            )}

            {success && (
              <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-3">
                <span className="text-sm text-green-700">{success}</span>
              </div>
            )}

            {/* Carnival-Branded Actions */}
            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSubmit}
                disabled={isLoading}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-[#DC1125] hover:bg-[#052049] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#DC1125] disabled:opacity-50 transition-colors"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    CREATING...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    CREATE TEMPLATE
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// frontend/src/components/Dashboard.tsx
"use client"
import React, { useState, useEffect, useMemo } from 'react';
import { Plus, Users, Video, Settings, LogOut, Eye, Calendar, Clock, User, Mail, CheckCircle, AlertCircle, Filter, X, ChevronDown, ChevronUp, Search, Tag, Star, Play, ChevronLeft, ChevronRight, ArrowUpDown, Trash2, AlertTriangle } from 'lucide-react';
import { MapPin, /* your existing imports */ } from 'lucide-react';
import UnifiedHeader from './UnifiedHeader';


interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
}

interface Template {
  id: string;
  title: string;
  description: string;
  created_at: string;
  is_active: boolean;
}

interface TemplateDetail extends Template {
  questions: Question[];
  keywords: Keyword[];
  sessions: SessionSummary[];
}

interface Question {
  id: string;
  question_text: string;
  time_limit: number;
  question_order: number;
}

interface Keyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

interface SessionSummary {
  id: string;
  candidateName: string;
  candidateEmail: string;
  status: string;
  videosSubmitted: number;
  totalQuestions: number;
  createdAt: string;
  interviewTitle: string;
  templateId: string;
  sessionId: string;
  averageRating: number | null;
}

type DashboardView = 'templates' | 'candidates' | 'completed';
type SortDirection = 'asc' | 'desc' | null;

interface SortConfig {
  key: string;
  direction: SortDirection;
}

interface DateRange {
  startDate: string;
  endDate: string;
}

export default function Dashboard() {
  const [user, setUser] = useState<User | null>(null);
  const [templates, setTemplates] = useState<Template[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<TemplateDetail | null>(null);
  const [allSessions, setAllSessions] = useState<SessionSummary[]>([]);
  const [currentView, setCurrentView] = useState<DashboardView>('templates');
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingDetail, setIsLoadingDetail] = useState(false);
  const [error, setError] = useState('');
  
  // Enhanced filtering and search state
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [templateFilter, setTemplateFilter] = useState('all');
  const [dateRange, setDateRange] = useState<DateRange>({ startDate: '', endDate: '' });
  const [showFilters, setShowFilters] = useState(false);
  
  // Sorting state
  const [candidatesSort, setCandidatesSort] = useState<SortConfig>({ key: 'createdAt', direction: 'desc' });
  const [completedSort, setCompletedSort] = useState<SortConfig>({ key: 'createdAt', direction: 'desc' });
  
  // Pagination state
  const [candidatesPage, setCandidatesPage] = useState(1);
  const [completedPage, setCompletedPage] = useState(1);
  const itemsPerPage = 10;
  
  // Send to candidate modal state
  const [showSendModal, setShowSendModal] = useState(false);
  const [candidateEmail, setCandidateEmail] = useState('');
  const [candidateName, setCandidateName] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [sendError, setSendError] = useState('');
  const [sendSuccess, setSendSuccess] = useState('');
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteError, setDeleteError] = useState('');

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      setUser(JSON.parse(userData));
    }
    fetchTemplates();
    fetchAllSessions();
  }, []);

  const fetchTemplates = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setTemplates(data);
        if (data.length > 0 && currentView === 'templates') {
          selectTemplate(data[0].id);
        }
      } else {
        const errorData = await response.json();
        setError(`Failed to fetch templates: ${errorData.error || response.statusText}`);
      }
    } catch (error) {
      setError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchAllSessions = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        const sessionData = data.map((session: any) => ({
          id: session.id,
          candidateName: session.candidateName,
          candidateEmail: session.candidateEmail,
          status: session.status,
          videosSubmitted: session.videosSubmitted || 0,
          totalQuestions: session.totalQuestions || 0,
          createdAt: session.createdAt,
          interviewTitle: session.interviewTitle,
          templateId: session.templateId,
          sessionId: session.id,
          averageRating: null
        }));
        setAllSessions(sessionData);
      } else {
        const errorData = await response.json();
        console.error('Sessions fetch error:', errorData);
      }
    } catch (error) {
      console.error('Sessions network error:', error);
      setError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const selectTemplate = async (templateId: string) => {
    if (selectedTemplate?.id === templateId) return;
    
    setIsLoadingDetail(true);
    try {
      const token = localStorage.getItem('authToken');
      
      const templateResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      const keywordsResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}/keywords`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      const sessionsResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      if (templateResponse.ok) {
        const templateData = await templateResponse.json();
        const keywordsData = keywordsResponse.ok ? await keywordsResponse.json() : { keywords: [] };
        const sessionsData = sessionsResponse.ok ? await sessionsResponse.json() : [];
        
        const templateSessions = sessionsData.filter((session: any) => 
          session.templateId === templateId
        ).map((session: any) => ({
          id: session.id,
          candidateName: session.candidateName,
          candidateEmail: session.candidateEmail,
          status: session.status,
          videosSubmitted: session.videosSubmitted || 0,
          totalQuestions: session.totalQuestions || 0,
          createdAt: session.createdAt
        }));

        setSelectedTemplate({
          ...templateData,
          keywords: keywordsData.keywords || [],
          sessions: templateSessions
        });
      }
    } catch (error) {
      console.error('Failed to fetch template details:', error);
    } finally {
      setIsLoadingDetail(false);
    }
  };

  // Sorting functions
  const handleSort = (key: string, view: 'candidates' | 'completed') => {
    const currentSort = view === 'candidates' ? candidatesSort : completedSort;
    const setSort = view === 'candidates' ? setCandidatesSort : setCompletedSort;
    
    let direction: SortDirection = 'asc';
    if (currentSort.key === key) {
      if (currentSort.direction === 'asc') direction = 'desc';
      else if (currentSort.direction === 'desc') direction = null;
      else direction = 'asc';
    }
    
    setSort({ key, direction });
    
    // Reset pagination when sorting changes
    if (view === 'candidates') setCandidatesPage(1);
    else setCompletedPage(1);
  };

  const getSortIcon = (key: string, currentSort: SortConfig) => {
    if (currentSort.key !== key) {
      return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
    }
    if (currentSort.direction === 'asc') {
      return <ChevronUp className="w-4 h-4 text-blue-600" />;
    }
    if (currentSort.direction === 'desc') {
      return <ChevronDown className="w-4 h-4 text-blue-600" />;
    }
    return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
  };

  // Filtering and sorting logic
  const getFilteredAndSortedSessions = (view: 'candidates' | 'completed') => {
    let filtered = view === 'candidates' ? allSessions : 
      allSessions.filter(s => s.videosSubmitted === s.totalQuestions && s.totalQuestions > 0);

    // Apply filters
    if (statusFilter !== 'all') {
      filtered = filtered.filter(session => {
        if (statusFilter === 'completed') {
          return session.status === 'completed' || session.videosSubmitted === session.totalQuestions;
        }
        if (statusFilter === 'in_progress') {
          return session.status === 'in_progress' && session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
        }
        if (statusFilter === 'pending') {
          return session.status === 'pending' || session.videosSubmitted === 0;
        }
        return session.status === statusFilter;
      });
    }

    // Template filter
    if (templateFilter !== 'all') {
      filtered = filtered.filter(session => session.templateId === templateFilter);
    }

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(session => 
        session.candidateName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.candidateEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.interviewTitle.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Date range filter
    if (dateRange.startDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) >= new Date(dateRange.startDate)
      );
    }
    if (dateRange.endDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) <= new Date(dateRange.endDate + 'T23:59:59')
      );
    }

    // Apply sorting
    const currentSort = view === 'candidates' ? candidatesSort : completedSort;
    if (currentSort.direction) {
      filtered.sort((a, b) => {
        let aValue: any = a[currentSort.key as keyof SessionSummary];
        let bValue: any = b[currentSort.key as keyof SessionSummary];

        // Handle different data types
        if (currentSort.key === 'createdAt') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        } else if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (currentSort.direction === 'asc') {
          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
        } else {
          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
        }
      });
    }

    return filtered;
  };

  // Pagination logic
  const getPaginatedData = (data: SessionSummary[], page: number) => {
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return {
      data: data.slice(startIndex, endIndex),
      totalPages: Math.ceil(data.length / itemsPerPage),
      totalItems: data.length
    };
  };

  // Clear all filters
  const clearFilters = () => {
    setSearchTerm('');
    setStatusFilter('all');
    setTemplateFilter('all');
    setDateRange({ startDate: '', endDate: '' });
    setCandidatesPage(1);
    setCompletedPage(1);
  };

  // Get unique templates for filter dropdown
  const uniqueTemplates = Array.from(
    new Map(allSessions.map(session => [session.templateId, session])).values()
  );

  const handleLogout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    window.location.href = '/';
  };

  const handleSendToCandidate = () => {
    setShowSendModal(true);
    setCandidateEmail('');
    setCandidateName('');
    setSendError('');
    setSendSuccess('');
  };

  const handleSendInterview = async () => {
    if (!selectedTemplate) return;

    setSendError('');
    setSendSuccess('');

    if (!candidateEmail.trim() || !candidateName.trim()) {
      setSendError('Please enter both candidate name and email');
      return;
    }

    setIsSending(true);

    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${selectedTemplate.id}/sessions`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            candidateEmail: candidateEmail.trim(),
            candidateName: candidateName.trim(),
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        const emailStatus = data.emailSent ? 
          'Interview invitation sent successfully via email!' : 
          'Session created but email failed to send. Please send the link manually.';
      
        setSendSuccess(`${emailStatus}\n\nInterview Link: ${data.interviewLink}`);

        setCandidateEmail('');
        setCandidateName('');
        
        setTimeout(() => {
          setShowSendModal(false);
          setSendSuccess('');
          selectTemplate(selectedTemplate.id);
        }, 3000);
      } else {
        setSendError(data.error || 'Failed to send interview');
      }
    } catch (error) {
      setSendError(`Network error: ${error instanceof Error ? error.message : 'Please try again.'}`);
    } finally {
      setIsSending(false);
    }
  };

  const closeSendModal = () => {
    setShowSendModal(false);
    setCandidateEmail('');
    setCandidateName('');
    setSendError('');
    setSendSuccess('');
  };

  const handleDeleteTemplate = () => {
  setShowDeleteModal(true);
  setDeleteConfirmText('');
  setDeleteError('');
};

const confirmDeleteTemplate = async () => {
  if (!selectedTemplate) return;

  if (deleteConfirmText.toLowerCase() !== 'delete template') {
    setDeleteError('Please type "delete template" exactly to confirm');
    return;
  }

  setIsDeleting(true);
  setDeleteError('');

  try {
    const token = localStorage.getItem('authToken');
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${selectedTemplate.id}`,
      {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      }
    );

    if (response.ok) {
      setTemplates(templates.filter(t => t.id !== selectedTemplate.id));
      setSelectedTemplate(null);
      setShowDeleteModal(false);
      console.log('Template deleted successfully');
    } else {
      const errorData = await response.json();
      setDeleteError(errorData.error || 'Failed to delete template');
    }
  } catch (error) {
    setDeleteError(`Network error: ${error instanceof Error ? error.message : 'Please try again.'}`);
  } finally {
    setIsDeleting(false);
  }
};

const closeDeleteModal = () => {
  setShowDeleteModal(false);
  setDeleteConfirmText('');
  setDeleteError('');
};

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'soft_skills': return 'bg-green-100 text-green-800 border-green-200';
      case 'experience': return 'bg-purple-100 text-purple-800 border-purple-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical': return '🔧';
      case 'soft_skills': return '🤝';
      case 'experience': return '💼';
      default: return '📋';
    }
  };

  const getStatusBadge = (session: SessionSummary) => {
    const completed = session.videosSubmitted === session.totalQuestions && session.totalQuestions > 0;
    const inProgress = session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
    
    if (completed) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Completed</span>;
    } else if (inProgress) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">In Progress</span>;
    } else {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Pending</span>;
    }
  };

  const renderStarRating = (rating: number | null) => {
    if (rating === null) {
      return <span className="text-gray-400 text-sm">Not rated</span>;
    }
    
    return (
      <div className="flex items-center">
        {[1, 2, 3, 4, 5].map((star) => (
          <svg
            key={star}
            className={`w-4 h-4 ${star <= rating ? 'text-yellow-400' : 'text-gray-300'}`}
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        ))}
        <span className="ml-1 text-sm text-gray-600">({rating.toFixed(1)})</span>
      </div>
    );
  };
 
  // Enhanced Filter Bar Component with Apply Button
  const FilterBar = ({ view }: { view: 'candidates' | 'completed' }) => {
    // Local state for pending filter changes (before apply)
    const [pendingSearchTerm, setPendingSearchTerm] = useState(searchTerm);
    const [pendingStatusFilter, setPendingStatusFilter] = useState(statusFilter);
    const [pendingTemplateFilter, setPendingTemplateFilter] = useState(templateFilter);
    const [pendingDateRange, setPendingDateRange] = useState(dateRange);

    // Apply filters function
    const applyFilters = () => {
      setSearchTerm(pendingSearchTerm);
      setStatusFilter(pendingStatusFilter);
      setTemplateFilter(pendingTemplateFilter);
      setDateRange(pendingDateRange);
      // Reset pagination when filters change
      if (view === 'candidates') setCandidatesPage(1);
      else setCompletedPage(1);
    };

    // Clear filters function
    const clearAllFilters = () => {
      setPendingSearchTerm('');
      setPendingStatusFilter('all');
      setPendingTemplateFilter('all');
      setPendingDateRange({ startDate: '', endDate: '' });
      setSearchTerm('');
      setStatusFilter('all');
      setTemplateFilter('all');
      setDateRange({ startDate: '', endDate: '' });
      setCandidatesPage(1);
      setCompletedPage(1);
    };

    // Check if there are pending changes
    const hasPendingChanges = 
      pendingSearchTerm !== searchTerm ||
      pendingStatusFilter !== statusFilter ||
      pendingTemplateFilter !== templateFilter ||
      pendingDateRange.startDate !== dateRange.startDate ||
      pendingDateRange.endDate !== dateRange.endDate;

    // Handle Enter key press in search input
    const handleSearchKeyPress = (e: React.KeyboardEvent) => {
      if (e.key === 'Enter') {
        applyFilters();
      }
    };
  const handleDeleteTemplate = () => {
    setShowDeleteModal(true);
    setDeleteConfirmText('');
    setDeleteError('');
  };

  const confirmDeleteTemplate = async () => {
    if (!selectedTemplate) return;

    if (deleteConfirmText.toLowerCase() !== 'delete template') {
      setDeleteError('Please type "delete template" exactly to confirm');
      return;
    }

    setIsDeleting(true);
    setDeleteError('');

    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${selectedTemplate.id}`,
        {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        // Remove template from local state
        setTemplates(templates.filter(t => t.id !== selectedTemplate.id));
        setSelectedTemplate(null);
        setShowDeleteModal(false);
        
        // Show success message or toast here if you want
        console.log('Template deleted successfully');
      } else {
        const errorData = await response.json();
        setDeleteError(errorData.error || 'Failed to delete template');
      }
    } catch (error) {
      setDeleteError(`Network error: ${error instanceof Error ? error.message : 'Please try again.'}`);
    } finally {
      setIsDeleting(false);
    }
  };

  const closeDeleteModal = () => {
    setShowDeleteModal(false);
    setDeleteConfirmText('');
    setDeleteError('');
  };

    return (
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="p-4 border-b border-gray-200 bg-[#10559A]">
          <div className="flex items-center justify-between">
            <h3 className="text-2xl font-medium text-white tempo-font">Filters & Search</h3>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                <Filter className="w-4 h-4 mr-2" />
                {showFilters ? 'Hide Filters' : 'Show Filters'}
              </button>
              {(searchTerm || statusFilter !== 'all' || templateFilter !== 'all' || dateRange.startDate || dateRange.endDate) && (
                <button
                  onClick={clearAllFilters}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50"
                >
                  <X className="w-4 h-4 mr-2" />
                  Clear All
                </button>
              )}
            </div>
          </div>
        </div>

        <div className={`transition-all duration-200 ${showFilters ? 'block' : 'hidden'}`}>
          <div className="p-4 space-y-4">
            {/* Search Bar */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Search Candidates
              </label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={pendingSearchTerm}
                  onChange={(e) => setPendingSearchTerm(e.target.value)}
                  onKeyPress={handleSearchKeyPress}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Search by name, email, or interview title... (Press Enter or Apply)"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Status Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={pendingStatusFilter}
                  onChange={(e) => setPendingStatusFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Status</option>
                  <option value="completed">Completed</option>
                  <option value="in_progress">In Progress</option>
                  <option value="pending">Pending</option>
                </select>
              </div>

              {/* Template Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Interview Template
                </label>
                <select
                  value={pendingTemplateFilter}
                  onChange={(e) => setPendingTemplateFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Templates</option>
                  {uniqueTemplates.map((session) => (
                    <option key={session.templateId} value={session.templateId}>
                      {session.interviewTitle}
                    </option>
                  ))}
                </select>
              </div>

              {/* Date Range */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Start Date
                </label>
                <input
                  type="date"
                  value={pendingDateRange.startDate}
                  onChange={(e) => setPendingDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  End Date
                </label>
                <input
                  type="date"
                  value={pendingDateRange.endDate}
                  onChange={(e) => setPendingDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            {/* Apply/Clear Buttons */}
            <div className="flex items-center justify-between pt-4 border-t border-gray-200">
              <div className="text-sm text-gray-500">
                {hasPendingChanges && (
                  <span className="text-amber-600 font-medium">
                    ⚠️ You have unsaved filter changes
                  </span>
                )}
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={() => {
                    setPendingSearchTerm(searchTerm);
                    setPendingStatusFilter(statusFilter);
                    setPendingTemplateFilter(templateFilter);
                    setPendingDateRange(dateRange);
                  }}
                  disabled={!hasPendingChanges}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Reset
                </button>
                <button
                  onClick={applyFilters}
                  disabled={!hasPendingChanges}
                  className={`px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white ${
                    hasPendingChanges 
                      ? 'bg-blue-600 hover:bg-blue-700' 
                      : 'bg-gray-400 cursor-not-allowed'
                  }`}
                >
                  Apply Filters
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Pagination Component
  const Pagination = ({ 
    currentPage, 
    totalPages, 
    totalItems, 
    onPageChange,
    itemsPerPage 
  }: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    onPageChange: (page: number) => void;
    itemsPerPage: number;
  }) => {
    const startItem = (currentPage - 1) * itemsPerPage + 1;
    const endItem = Math.min(currentPage * itemsPerPage, totalItems);

    return (
      <div className="flex items-center justify-between px-6 py-3 bg-white border-t border-gray-200">
        <div className="flex-1 flex justify-between sm:hidden">
          <button
            onClick={() => onPageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <button
            onClick={() => onPageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
        <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p className="text-sm text-gray-700">
              Showing <span className="font-medium">{startItem}</span> to{' '}
              <span className="font-medium">{endItem}</span> of{' '}
              <span className="font-medium">{totalItems}</span> results
            </p>
          </div>
          <div>
            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
              <button
                onClick={() => onPageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
                if (totalPages <= 7 || page === 1 || page === totalPages || (page >= currentPage - 1 && page <= currentPage + 1)) {
                  return (
                    <button
                      key={page}
                      onClick={() => onPageChange(page)}
                      className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                        page === currentPage
                          ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      {page}
                    </button>
                  );
                } else if (page === currentPage - 2 || page === currentPage + 2) {
                  return (
                    <span key={page} className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                      ...
                    </span>
                  );
                }
                return null;
              })}
              
              <button
                onClick={() => onPageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </nav>
          </div>
        </div>
      </div>
    );
  };

  // Sortable Table Header Component
  const SortableHeader = ({ 
    label, 
    sortKey, 
    currentSort, 
    onSort 
  }: { 
    label: string; 
    sortKey: string; 
    currentSort: SortConfig; 
    onSort: (key: string) => void; 
  }) => (
    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors">
      <button
        onClick={() => onSort(sortKey)}
        className="flex items-center space-x-1 w-full text-left"
      >
        <span>{label}</span>
        {getSortIcon(sortKey, currentSort)}
      </button>
    </th>
  );
  // Candidates View Component
  const CandidatesView = () => {
    const filteredSessions = getFilteredAndSortedSessions('candidates');
    const paginatedData = getPaginatedData(filteredSessions, candidatesPage);

    return (
      <div>
        <FilterBar view="candidates" />
        
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-2xl font-medium text-gray-900 tempo-font">
              All Candidates ({filteredSessions.length})
            </h2>
          </div>
          
          {paginatedData.data.length === 0 ? (
            <div className="text-center py-12">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">No candidates found</h3>
              <p className="mt-1 text-sm text-gray-500">
                {filteredSessions.length === 0 && allSessions.length === 0 
                  ? "No candidates have been invited yet."
                  : "Try adjusting your search or filter criteria."
                }
              </p>
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <SortableHeader 
                        label="Candidate" 
                        sortKey="candidateName" 
                        currentSort={candidatesSort} 
                        onSort={(key) => handleSort(key, 'candidates')} 
                      />
                      <SortableHeader 
                        label="Status" 
                        sortKey="status" 
                        currentSort={candidatesSort} 
                        onSort={(key) => handleSort(key, 'candidates')} 
                      />
                      <SortableHeader 
                        label="Interview Date" 
                        sortKey="createdAt" 
                        currentSort={candidatesSort} 
                        onSort={(key) => handleSort(key, 'candidates')} 
                      />
                      <SortableHeader 
                        label="Position" 
                        sortKey="interviewTitle" 
                        currentSort={candidatesSort} 
                        onSort={(key) => handleSort(key, 'candidates')} 
                      />
                      <SortableHeader 
                        label="Progress" 
                        sortKey="videosSubmitted" 
                        currentSort={candidatesSort} 
                        onSort={(key) => handleSort(key, 'candidates')} 
                      />
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedData.data.map((session) => (
                      <tr key={session.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">{session.candidateName}</div>
                            <div className="text-sm text-gray-500">{session.candidateEmail}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {getStatusBadge(session)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          {formatDate(session.createdAt)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">{session.interviewTitle}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {session.videosSubmitted}/{session.totalQuestions} videos
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => window.location.href = `/review/${session.sessionId}`}
                            className="text-blue-600 hover:text-blue-900"
                            disabled={session.videosSubmitted === 0}
                          >
                            {session.videosSubmitted > 0 ? 'Review' : 'No videos'}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              <Pagination
                currentPage={candidatesPage}
                totalPages={paginatedData.totalPages}
                totalItems={paginatedData.totalItems}
                onPageChange={setCandidatesPage}
                itemsPerPage={itemsPerPage}
              />
            </>
          )}
        </div>
      </div>
    );
  };

  // Completed View Component
  const CompletedView = () => {
    const filteredSessions = getFilteredAndSortedSessions('completed');
    const paginatedData = getPaginatedData(filteredSessions, completedPage);
    
    return (
      <div>
        <FilterBar view="completed" />
        
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-2xl font-medium text-gray-900 tempo-font">
              Completed Interviews ({filteredSessions.length})
            </h2>
          </div>
          
          {paginatedData.data.length === 0 ? (
            <div className="text-center py-12">
              <Clock className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">No completed interviews found</h3>
              <p className="mt-1 text-sm text-gray-500">
                {filteredSessions.length === 0 && allSessions.filter(s => s.videosSubmitted === s.totalQuestions && s.totalQuestions > 0).length === 0
                  ? "No interviews have been completed yet."
                  : "Try adjusting your search or filter criteria."
                }
              </p>
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <SortableHeader 
                        label="Candidate" 
                        sortKey="candidateName" 
                        currentSort={completedSort} 
                        onSort={(key) => handleSort(key, 'completed')} 
                      />
                      <SortableHeader 
                        label="Completed Date" 
                        sortKey="createdAt" 
                        currentSort={completedSort} 
                        onSort={(key) => handleSort(key, 'completed')} 
                      />
                      <SortableHeader 
                        label="Rating" 
                        sortKey="averageRating" 
                        currentSort={completedSort} 
                        onSort={(key) => handleSort(key, 'completed')} 
                      />
                      <SortableHeader 
                        label="Position" 
                        sortKey="interviewTitle" 
                        currentSort={completedSort} 
                        onSort={(key) => handleSort(key, 'completed')} 
                      />
                      <SortableHeader 
                        label="Videos" 
                        sortKey="videosSubmitted" 
                        currentSort={completedSort} 
                        onSort={(key) => handleSort(key, 'completed')} 
                      />
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedData.data.map((session) => (
                      <tr key={session.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">{session.candidateName}</div>
                            <div className="text-sm text-gray-500">{session.candidateEmail}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          {formatDate(session.createdAt)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {renderStarRating(session.averageRating)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">{session.interviewTitle}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                            {session.videosSubmitted}/{session.totalQuestions}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => window.location.href = `/review/${session.sessionId}`}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            Review
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              <Pagination
                currentPage={completedPage}
                totalPages={paginatedData.totalPages}
                totalItems={paginatedData.totalItems}
                onPageChange={setCompletedPage}
                itemsPerPage={itemsPerPage}
              />
            </>
          )}
        </div>
      </div>
    );
  };
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }


return (
  <div className="min-h-screen bg-gray-50">

   <UnifiedHeader currentPage="templates" user={user} />

  

    {/* Main Content */}
    <div className="max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Error Loading Data</h3>
              <div className="mt-2 text-sm text-red-700">
                {error}
              </div>
              <div className="mt-3">
                <button
                  onClick={() => {
                    setError('');
                    setIsLoading(true);
                    fetchTemplates();
                    fetchAllSessions();
                  }}
                  className="text-sm bg-red-100 text-red-800 rounded-md px-2 py-1 hover:bg-red-200"
                >
                  Try Again
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {currentView === 'templates' && (
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Left Sidebar - SOLID RED HEADER (no gradient) */}
          <div className="lg:col-span-4 bg-white rounded-lg shadow border-r border-gray-200 flex flex-col">
            {/* Template List Header - SOLID RED */}
            <div className="p-6 border-b border-gray-200 bg-[#10559A]">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                  POSITION TEMPLATES
                </h2>
                <div className="flex items-center space-x-3">
                  <span className="text-sm text-white bg-white/20 px-3 py-1 rounded-full font-medium">
                    {templates.length}
                  </span>
                  {/* CREATE TEMPLATE BUTTON - ADDED HERE */}
                  <button
                    onClick={() => window.location.href = '/create-template'}
                    className="tempo-font inline-flex items-center px-3 py-2 border border-white/30 text-xs font-bold rounded-md text-white bg-[#DC1125] hover:bg-white/20 transition-colors"
                  >
                    <Plus className="h-3 w-3 mr-1" />
                    CREATE
                  </button>
                </div>
              </div>
              
              {/* Search Bar */}
              <div className="relative mb-4">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-white/50 bg-white text-gray-900 placeholder-gray-500"
                  placeholder="Search templates..."
                />
              </div>

              {/* Status Filter Section */}
              <div className="space-y-3">
                <div>
                  <h3 className="text-sm font-bold text-white mb-3 flex items-center tempo-font tracking-tight">
                    <Filter className="h-4 w-4 mr-2" />
                    FILTERS
                  </h3>
                  
                  {/* Status Filter Options */}
                  <div className="space-y-2">
                    <label className="flex items-center cursor-pointer group">
                      <input
                        type="radio"
                        name="templateStatus"
                        value="all"
                        checked={statusFilter === 'all'}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="h-4 w-4 text-white focus:ring-white/50 border-white/30 bg-white/10"
                      />
                      <span className="ml-3 text-sm text-white flex items-center justify-between w-full group-hover:text-white/90">
                        <span>All Templates</span>
                        <span className="text-xs text-white bg-white/20 px-2 py-1 rounded-full">
                          {templates.length}
                        </span>
                      </span>
                    </label>

                    <label className="flex items-center cursor-pointer group">
                      <input
                        type="radio"
                        name="templateStatus"
                        value="active"
                        checked={statusFilter === 'active'}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="h-4 w-4 text-white focus:ring-white/50 border-white/30 bg-white/10"
                      />
                      <span className="ml-3 text-sm text-white flex items-center justify-between w-full group-hover:text-white/90">
                        <span className="flex items-center">
                          <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                          Published Templates
                        </span>
                        <span className="text-xs text-green-100 bg-green-500/30 px-2 py-1 rounded-full">
                          {templates.filter(t => t.is_active).length}
                        </span>
                      </span>
                    </label>

                    <label className="flex items-center cursor-pointer group">
                      <input
                        type="radio"
                        name="templateStatus"
                        value="inactive"
                        checked={statusFilter === 'inactive'}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="h-4 w-4 text-white focus:ring-white/50 border-white/30 bg-white/10"
                      />
                      <span className="ml-3 text-sm text-white flex items-center justify-between w-full group-hover:text-white/90">
                        <span className="flex items-center">
                          <div className="w-2 h-2 bg-gray-300 rounded-full mr-2"></div>
                          Draft Templates
                        </span>
                        <span className="text-xs text-gray-200 bg-white/20 px-2 py-1 rounded-full">
                          {templates.filter(t => !t.is_active).length}
                        </span>
                      </span>
                    </label>

                    <label className="flex items-center cursor-pointer opacity-60">
                      <input
                        type="radio"
                        name="templateStatus"
                        value="archived"
                        checked={statusFilter === 'archived'}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="h-4 w-4 text-white focus:ring-white/50 border-white/30 bg-white/10"
                        disabled
                      />
                      <span className="ml-3 text-sm text-white/70 flex items-center justify-between w-full">
                        <span className="flex items-center">
                          <div className="w-2 h-2 bg-orange-300 rounded-full mr-2"></div>
                          Archived Templates
                        </span>
                        <span className="text-xs text-orange-200 bg-orange-500/20 px-2 py-1 rounded-full">
                          0
                        </span>
                      </span>
                    </label>
                  </div>
                </div>

                {/* Clear Filters */}
                {statusFilter !== 'all' && (
                  <button
                    onClick={() => setStatusFilter('all')}
                    className="w-full text-left text-sm text-white/90 hover:text-white flex items-center"
                  >
                    <X className="h-3 w-3 mr-1" />
                    Clear filters
                  </button>
                )}
              </div>
            </div>

            {/* Template List */}
            <div className="flex-1 overflow-y-auto max-h-[calc(100vh-500px)]">
              {(() => {
                let filteredTemplates = templates;
                if (statusFilter === 'active') {
                  filteredTemplates = templates.filter(t => t.is_active);
                } else if (statusFilter === 'inactive') {
                  filteredTemplates = templates.filter(t => !t.is_active);
                } else if (statusFilter === 'archived') {
                  filteredTemplates = [];
                }

                if (searchTerm) {
                  filteredTemplates = filteredTemplates.filter(template =>
                    template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    (template.description && template.description.toLowerCase().includes(searchTerm.toLowerCase()))
                  );
                }

                if (filteredTemplates.length === 0) {
                  return (
                    <div className="p-6 text-center">
                      <Video className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                      <h3 className="text-sm font-medium text-gray-900 mb-2">
                        {statusFilter === 'all' && !searchTerm 
                          ? "No templates found" 
                          : statusFilter === 'archived'
                          ? "No archived templates"
                          : searchTerm
                          ? `No templates match "${searchTerm}"`
                          : `No ${statusFilter === 'active' ? 'published' : 'draft'} templates`
                        }
                      </h3>
                      <p className="text-sm text-gray-500 mb-4">
                        {statusFilter === 'all' && !searchTerm 
                          ? "Get started by creating your first interview template."
                          : searchTerm
                          ? "Try adjusting your search criteria."
                          : `Create your first ${statusFilter === 'active' ? 'published' : 'draft'} template.`
                        }
                      </p>
                      {(statusFilter === 'all' || statusFilter === 'inactive') && !searchTerm && (
                        <button 
                          onClick={() => window.location.href = '/create-template'}
                          className="tempo-font inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-bold rounded-md text-white bg-[#DC1125] hover:bg-[#052049] transition-colors"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          CREATE TEMPLATE
                        </button>
                      )}
                    </div>
                  );
                }

                return (
                  <div className="divide-y divide-gray-200">
                    {filteredTemplates.map((template) => (
                      <button
                        key={template.id}
                        onClick={() => selectTemplate(template.id)}
                        className={`w-full text-left p-4 hover:bg-gray-50 transition-colors ${
                          selectedTemplate?.id === template.id ? 'bg-blue-50 border-r-4 border-[#DC1125]' : ''
                        }`}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-sm font-medium text-gray-900 truncate pr-2">
                            {template.title}
                          </h3>
                          <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${
                              template.is_active ? 'bg-[#10559A]' : 'bg-gray-400'
                            }`}></div>
                            <ChevronRight className={`h-4 w-4 transition-transform ${
                              selectedTemplate?.id === template.id ? 'rotate-90 text-[#DC1125]' : 'text-gray-400'
                            }`} />
                          </div>
                        </div>
                        
                        <p className="text-xs text-gray-600 mb-2 line-clamp-2">
                          {template.description || 'No description'}
                        </p>
                        
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{formatDate(template.created_at)}</span>
                          <span className={`px-2 py-1 rounded-full ${
                            template.is_active 
                              ? 'bg-[#10559A]/10 text-[#10559A] border border-[#10559A]/20' 
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {template.is_active ? 'Published' : 'Draft'}
                          </span>
                        </div>
                      </button>
                    ))}
                  </div>
                );
              })()}
            </div>
          </div>

          {/* Main Content Area - SOLID NAVY HEADER (no gradient) */}
          <div className="lg:col-span-8 bg-white rounded-lg shadow">
            {!selectedTemplate ? (
              <div className="h-full flex items-center justify-center min-h-[600px]">
                <div className="text-center">
                  <Video className="mx-auto h-16 w-16 text-[#DC1125] mb-4" />
                  <h3 className="text-lg font-medium text-[#052049] mb-2 tempo-font tracking-tight">
                    SELECT A TEMPLATE
                  </h3>
                  <p className="text-gray-500">Choose a template from the list to view details and manage candidates</p>
                </div>
              </div>
            ) : isLoadingDetail ? (
              <div className="h-full flex items-center justify-center min-h-[600px]">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
              </div>
            ) : (
              <div className="h-full overflow-y-auto">
                {/* Template Header - SOLID NAVY (no gradient) */}
                <div className="p-6 border-b border-gray-200 bg-[#052049]">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center mb-3">
                        <h1 className="text-2xl font-bold text-white mr-3 tempo-font tracking-tight">
                          {selectedTemplate.title.toUpperCase()}
                        </h1>
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                          selectedTemplate.is_active 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-white/20 text-white'
                        }`}>
                          {selectedTemplate.is_active ? 'Published' : 'Draft'}
                        </span>
                      </div>
                      
                      <p className="text-white/90 mb-4">{selectedTemplate.description}</p>
                      
                      <div className="flex items-center text-sm text-white/80 space-x-6">
                        <div className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          Created {formatDate(selectedTemplate.created_at)}
                        </div>
                        <div className="flex items-center">
                          <Play className="h-4 w-4 mr-1" />
                          ID: {selectedTemplate.id.substring(0, 8)}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3 ml-6">
                      <button
                        onClick={() => window.location.href = `/edit-template/${selectedTemplate.id}`}
                        className="inline-flex items-center px-4 py-2 border border-white/30 rounded-md text-sm font-medium tempo-font text-white bg-white/10 hover:bg-white/20 transition-colors"
                      >
                        <Settings className="h-4 w-4 mr-2" />
                        EDIT
                      </button>
                      <button
                        onClick={handleDeleteTemplate}
                        className="inline-flex items-center px-4 py-2 border border-red-300 rounded-md tempo-font text-sm font-medium text-red-100 bg-red-500/20 hover:bg-red-500/30 transition-colors"
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        DELETE
                      </button>
                      <button
                        onClick={handleSendToCandidate}
                        className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-bold text-white bg-[#10559A] hover:bg-[#2f8ce9] transition-colors"
                      >
                        <Mail className="h-4 w-4 mr-2" />
                        SEND
                      </button>
                      <button
                        onClick={() => window.location.href = `/review?template=${selectedTemplate.id}`}
                        className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-bold text-[#052049] bg-white hover:bg-[#e6e6e6] transition-colors"
                      >
                        <Eye className="h-4 w-4 mr-2" />
                        REVIEW
                      </button>
                    </div>
                  </div>
                </div>

                {/* Stats Cards - Keep these, they look good */}
                <div className="p-6 border-b border-gray-200 bg-gray-50">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                    <div className="text-center p-4 bg-white rounded-lg shadow-sm border-l-4 border-[#DC1125]">
                      <div className="text-3xl font-bold text-[#DC1125] tempo-font">{selectedTemplate.questions.length}</div>
                      <div className="text-sm text-gray-600">Questions</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg shadow-sm border-l-4 border-[#10559A]">
                      <div className="text-3xl font-bold text-[#10559A] tempo-font">{selectedTemplate.sessions.length}</div>
                      <div className="text-sm text-gray-600">Total Candidates</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg shadow-sm border-l-4 border-[#052049]">
                      <div className="text-3xl font-bold text-[#052049] tempo-font">
                        {selectedTemplate.sessions.filter(s => s.videosSubmitted === s.totalQuestions && s.totalQuestions > 0).length}
                      </div>
                      <div className="text-sm text-gray-600">Completed</div>
                    </div>
                    <div className="text-center p-4 bg-white rounded-lg shadow-sm border-l-4 border-orange-500">
                      <div className="text-3xl font-bold text-orange-600 tempo-font">{selectedTemplate.keywords.length}</div>
                      <div className="text-sm text-gray-600">AI Keywords</div>
                    </div>
                  </div>
                </div>

                {/* Rest of content - keeping the same good styling */}
                <div className="p-6">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Questions Section */}
                    <div className="bg-white border border-gray-200 rounded-lg p-6">
                      <h3 className="text-lg font-bold text-[#052049] mb-4 flex items-center tempo-font tracking-tight">
                        <span className="bg-[#DC1125] p-2 rounded-lg mr-3">
                          <Play className="h-5 w-5 text-white" />
                        </span>
                        QUESTIONS ({selectedTemplate.questions.length})
                      </h3>
                      {/* Keep existing questions content */}
                      {selectedTemplate.questions.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <p>No questions configured</p>
                        </div>
                      ) : (
                        <div className="space-y-3 max-h-64 overflow-y-auto">
                          {selectedTemplate.questions.map((question, index) => (
                            <div key={question.id} className="border border-gray-200 rounded-lg p-3 hover:border-[#DC1125]/30 transition-colors">
                              <div className="flex items-start justify-between mb-2">
                                <span className="text-sm font-bold text-[#DC1125] tempo-font">Q{question.question_order}</span>
                                <div className="flex items-center text-xs text-gray-500">
                                  <Clock className="w-3 h-3 mr-1" />
                                  {Math.floor(question.time_limit / 60)}:{(question.time_limit % 60).toString().padStart(2, '0')}
                                </div>
                              </div>
                              <p className="text-sm text-gray-700 line-clamp-2">{question.question_text}</p>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Keywords Section - Keep existing good styling */}
                    <div className="bg-white border border-gray-200 rounded-lg p-6">
                      <h3 className="text-lg font-bold text-[#052049] mb-4 flex items-center tempo-font tracking-tight">
                        <span className="bg-[#10559A] p-2 rounded-lg mr-3">
                          <Tag className="h-5 w-5 text-white" />
                        </span>
                        AI KEYWORDS ({selectedTemplate.keywords.length})
                      </h3>
                      {selectedTemplate.keywords.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <p>No keywords configured</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {['technical', 'soft_skills', 'experience', 'general'].map(category => {
                            const categoryKeywords = selectedTemplate.keywords.filter(k => k.category === category);
                            if (categoryKeywords.length === 0) return null;
                            
                            return (
                              <div key={category}>
                                <h4 className="text-sm font-bold text-[#052049] mb-2 flex items-center tempo-font tracking-tight">
                                  <span className="mr-2">{getCategoryIcon(category)}</span>
                                  {category.replace('_', ' ').toUpperCase()} ({categoryKeywords.length})
                                </h4>
                                <div className="flex flex-wrap gap-2">
                                  {categoryKeywords.slice(0, 10).map(keyword => (
                                    <span
                                      key={keyword.id}
                                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getCategoryColor(keyword.category)}`}
                                    >
                                      {keyword.keyword}
                                      {keyword.weight > 1 && (
                                        <span className="ml-1 flex items-center">
                                          <Star className="w-3 h-3" />
                                          {keyword.weight}x
                                        </span>
                                      )}
                                    </span>
                                  ))}
                                  {categoryKeywords.length > 10 && (
                                    <span className="text-xs text-gray-500">
                                      +{categoryKeywords.length - 10} more...
                                    </span>
                                  )}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Recent Candidates - Keep existing good styling */}
                  <div className="mt-6 bg-white border border-gray-200 rounded-lg p-6">
                    <h3 className="text-lg font-bold text-[#052049] mb-4 flex items-center tempo-font tracking-tight">
                      <span className="bg-[#052049] p-2 rounded-lg mr-3">
                        <Users className="h-5 w-5 text-white" />
                      </span>
                      RECENT CANDIDATES ({selectedTemplate.sessions.length})
                    </h3>
                    {selectedTemplate.sessions.length === 0 ? (
                      <div className="text-center py-8 text-gray-500">
                        <p>No candidates have been invited yet</p>
                        <button
                          onClick={handleSendToCandidate}
                          className="mt-4 tempo-font inline-flex items-center px-4 py-2 border border-transparent text-sm font-bold rounded-md text-white bg-[#DC1125] hover:bg-[#052049] transition-colors"
                        >
                          <Mail className="h-4 w-4 mr-2" />
                          INVITE FIRST CANDIDATE
                        </button>
                      </div>
                    ) : (
                      <div className="space-y-2">
                        {selectedTemplate.sessions.slice(0, 5).map(session => (
                          <div key={session.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:border-[#10559A]/30 transition-colors">
                            <div className="flex-1">
                              <div className="text-sm font-medium text-gray-900">{session.candidateName}</div>
                              <div className="text-sm text-gray-500">{session.candidateEmail}</div>
                            </div>
                            <div className="flex items-center space-x-3">
                              {getStatusBadge(session)}
                              <div className="text-sm text-gray-500">
                                {session.videosSubmitted}/{session.totalQuestions}
                              </div>
                              <button
                                onClick={() => window.location.href = `/review/${session.id}`}
                                className="text-[#10559A] hover:text-[#052049] text-sm font-medium"
                                disabled={session.videosSubmitted === 0}
                              >
                                {session.videosSubmitted > 0 ? 'Review' : 'No videos'}
                              </button>
                            </div>
                          </div>
                        ))}
                        {selectedTemplate.sessions.length > 5 && (
                          <div className="text-center pt-3">
                            <button
                              onClick={() => setCurrentView('candidates')}
                              className="text-[#10559A] hover:text-[#052049] text-sm font-medium"
                            >
                              View all {selectedTemplate.sessions.length} candidates →
                            </button>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Keep existing candidates and completed views */}
      {currentView === 'candidates' && <CandidatesView />}
      {currentView === 'completed' && <CompletedView />}
    </div>

    {/* Send to Candidate Modal */}
    {showSendModal && (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
          <div className="mt-3">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Send Interview to Candidate</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Candidate Name *
                </label>
                <input
                  type="text"
                  value={candidateName}
                  onChange={(e) => setCandidateName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter candidate's full name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  value={candidateEmail}
                  onChange={(e) => setCandidateEmail(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="candidate@email.com"
                />
              </div>

              {sendError && (
                <div className="bg-red-50 border border-red-200 rounded-md p-3">
                  <span className="text-sm text-red-700">{sendError}</span>
                </div>
              )}

              {sendSuccess && (
                <div className="bg-green-50 border border-green-200 rounded-md p-3">
                  <div className="text-sm text-green-700">
                    {sendSuccess.split('\n\n').map((line, index) => (
                      <div key={index} className={index === 0 ? 'font-medium mb-2' : 'text-xs break-all'}>
                        {line.replace('Interview Link: ', '')}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex space-x-3 pt-4">
                <button
                  onClick={closeSendModal}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSendInterview}
                  disabled={isSending || !!sendSuccess}
                  className="flex-1 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                >
                  {isSending ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                      Sending...
                    </>
                  ) : sendSuccess ? (
                    'Sent!'
                  ) : (
                    'Send Interview'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}

    {/* Delete Template Modal */}
    {showDeleteModal && selectedTemplate && (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
          <div className="mt-3">
            <div className="flex items-center mb-4">
              <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                <Trash2 className="h-6 w-6 text-red-600" />
              </div>
            </div>
            
            <h3 className="text-lg font-medium text-gray-900 mb-2 text-center">Delete Template</h3>
            <p className="text-sm text-gray-600 mb-4 text-center">
              Are you sure you want to delete "<strong>{selectedTemplate.title}</strong>"? This action cannot be undone.
            </p>
            
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
              <div className="flex">
                <AlertTriangle className="h-5 w-5 text-yellow-400 mr-2 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-yellow-800">
                  <p className="font-medium">Warning:</p>
                  <ul className="mt-1 list-disc list-inside space-y-1">
                    <li>All questions will be permanently deleted</li>
                    <li>All AI keywords will be removed</li>
                    <li>Existing candidate sessions will be orphaned</li>
                    <li>This action cannot be reversed</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Type <code className="bg-gray-100 px-1 rounded text-red-600 font-mono">delete template</code> to confirm:
                </label>
                <input
                  type="text"
                  value={deleteConfirmText}
                  onChange={(e) => setDeleteConfirmText(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  placeholder="delete template"
                  autoComplete="off"
                />
              </div>

              {deleteError && (
                <div className="bg-red-50 border border-red-200 rounded-md p-3">
                  <span className="text-sm text-red-700">{deleteError}</span>
                </div>
              )}

              <div className="flex space-x-3 pt-4">
                <button
                  onClick={closeDeleteModal}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={confirmDeleteTemplate}
                  disabled={isDeleting || deleteConfirmText.toLowerCase() !== 'delete template'}
                  className="flex-1 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isDeleting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                      Deleting...
                    </>
                  ) : (
                    'Delete Template'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
);
}

// frontend/src/components/EditPosition.tsx
"use client"
import React, { useState, useEffect } from 'react';
import { ArrowLeft, Plus, Trash2, Clock, Save, AlertCircle, Tag, Star, MapPin, Mail, Users } from 'lucide-react';

interface Question {
  id: string;
  text: string;
  timeLimit: number;
  question_order: number;
}

interface Keyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

interface PositionData {
  id: string;
  title: string;
  description: string;
  template_id: string;
  created_by: string;
  is_active: boolean;
  created_at: string;
  questions: Question[];
  keywords: Keyword[];
  templateTitle: string;
}

export default function EditPosition({ positionId }: { positionId: string }) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [questions, setQuestions] = useState<Question[]>([]);
  
  // Keywords state
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  const [newKeyword, setNewKeyword] = useState('');
  const [newKeywordCategory, setNewKeywordCategory] = useState('technical');
  const [newKeywordWeight, setNewKeywordWeight] = useState(1);
  
  // Send to candidate modal state
  const [showSendModal, setShowSendModal] = useState(false);
  const [candidateEmail, setCandidateEmail] = useState('');
  const [candidateName, setCandidateName] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [sendError, setSendError] = useState('');
  const [sendSuccess, setSendSuccess] = useState('');
  
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [activeTab, setActiveTab] = useState<'questions' | 'keywords'>('questions');
  const [positionData, setPositionData] = useState<PositionData | null>(null);

  useEffect(() => {
    if (positionId) {
      loadPositionData();
    }
  }, [positionId]);

  const loadPositionData = async () => {
    try {
      const token = localStorage.getItem('authToken');
      
      // Load position details including questions and keywords
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions/${positionId}`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setPositionData(data);
        
        // Set form values
        setTitle(data.title);
        setDescription(data.description || '');
        
        // Map questions with proper structure
        const mappedQuestions = data.questions.map((q: any) => ({
          id: q.id,
          text: q.question_text,
          timeLimit: q.time_limit,
          question_order: q.question_order
        }));
        setQuestions(mappedQuestions);

        // Set keywords
        setKeywords(data.keywords || []);
      } else {
        setError('Failed to load position data');
      }
    } catch (error) {
      setError('Failed to load position data');
    } finally {
      setIsLoading(false);
    }
  };

  const addQuestion = () => {
    const newQuestion: Question = {
      id: `new-${Date.now()}`,
      text: '',
      timeLimit: 90,
      question_order: questions.length + 1
    };
    setQuestions([...questions, newQuestion]);
  };

  const removeQuestion = (id: string) => {
    if (questions.length > 1) {
      setQuestions(questions.filter(q => q.id !== id).map((q, index) => ({
        ...q,
        question_order: index + 1
      })));
    }
  };

  const updateQuestion = (id: string, field: keyof Question, value: string | number) => {
    setQuestions(questions.map(q => 
      q.id === id ? { ...q, [field]: value } : q
    ));
  };

  // Keyword management functions
  const addKeyword = () => {
    if (!newKeyword.trim()) return;
    
    const keyword: Keyword = {
      id: `new-${Date.now()}`,
      keyword: newKeyword.trim().toLowerCase(),
      category: newKeywordCategory,
      weight: newKeywordWeight
    };
    
    setKeywords([...keywords, keyword]);
    setNewKeyword('');
    setNewKeywordWeight(1);
  };

  const removeKeyword = (id: string) => {
    setKeywords(keywords.filter(k => k.id !== id));
  };

  const updateKeyword = (id: string, field: keyof Keyword, value: string | number) => {
    setKeywords(keywords.map(k => 
      k.id === id ? { ...k, [field]: value } : k
    ));
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical':
        return 'bg-blue-100 text-blue-800';
      case 'soft_skills':
        return 'bg-green-100 text-green-800';
      case 'experience':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical':
        return '🔧';
      case 'soft_skills':
        return '🤝';
      case 'experience':
        return '💼';
      default:
        return '📋';
    }
  };

  const handleSave = async () => {
    setError('');
    setSuccess('');

    // Validation
    if (!title.trim()) {
      setError('Position title is required');
      return;
    }

    const validQuestions = questions.filter(q => q.text.trim() !== '');
    if (validQuestions.length === 0) {
      setError('At least one question is required');
      return;
    }

    setIsSaving(true);

    try {
      const token = localStorage.getItem('authToken');
      
      // Update position
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions/${positionId}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            title: title.trim(),
            description: description.trim(),
            questions: validQuestions.map((q, index) => ({
              text: q.text.trim(),
              timeLimit: q.timeLimit
            })),
            keywords: keywords.map(k => ({
              keyword: k.keyword,
              category: k.category,
              weight: k.weight
            }))
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update position');
      }

      setSuccess('Position updated successfully!');
      
      // Redirect back to positions after 2 seconds
      setTimeout(() => {
        window.location.href = '/positions';
      }, 2000);

    } catch (error: any) {
      setError(error.message || 'Failed to update position');
    } finally {
      setIsSaving(false);
    }
  };

  const handleSendToCandidate = () => {
    setShowSendModal(true);
    setCandidateEmail('');
    setCandidateName('');
    setSendError('');
    setSendSuccess('');
  };

  const handleSendInterview = async () => {
    if (!positionData) return;

    setSendError('');
    setSendSuccess('');

    if (!candidateEmail.trim() || !candidateName.trim()) {
      setSendError('Please enter both candidate name and email');
      return;
    }

    setIsSending(true);

    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions/${positionId}/sessions`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            candidateEmail: candidateEmail.trim(),
            candidateName: candidateName.trim(),
          }),
        }
      );

      const data = await response.json();

      if (response.ok) {
        const emailStatus = data.emailSent ? 
          'Interview invitation sent successfully via email!' : 
          'Session created but email failed to send. Please send the link manually.';
      
        setSendSuccess(`${emailStatus}\n\nInterview Link: ${data.interviewLink}`);

        setCandidateEmail('');
        setCandidateName('');
        
        setTimeout(() => {
          setShowSendModal(false);
          setSendSuccess('');
        }, 3000);
      } else {
        setSendError(data.error || 'Failed to send interview');
      }
    } catch (error) {
      setSendError(`Network error: ${error instanceof Error ? error.message : 'Please try again.'}`);
    } finally {
      setIsSending(false);
    }
  };

  const closeSendModal = () => {
    setShowSendModal(false);
    setCandidateEmail('');
    setCandidateName('');
    setSendError('');
    setSendSuccess('');
  };

  const goBack = () => {
    if (window.confirm('Are you sure you want to leave? Any unsaved changes will be lost.')) {
      window.location.href = '/positions';
    }
  };

  const keywordsByCategory = keywords.reduce((acc, keyword) => {
    if (!acc[keyword.category]) {
      acc[keyword.category] = [];
    }
    acc[keyword.category].push(keyword);
    return acc;
  }, {} as Record<string, Keyword[]>);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Carnival-Branded Header */}
      <header className="bg-[#052049] shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <button
                onClick={goBack}
                className="flex items-center text-white hover:text-gray-300 mr-4 transition-colors"
              >
                <ArrowLeft className="h-5 w-5 mr-1" />
                Back to Positions
              </button>
              <h1 className="text-xl font-bold text-white tempo-font tracking-tight">
                EDIT POSITION
              </h1>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleSendToCandidate}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-bold text-white bg-[#10559A] hover:bg-[#2f8ce9] transition-colors"
              >
                <Mail className="h-4 w-4 mr-2" />
                SEND TO CANDIDATE
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow">
          <div className="p-6">
            {/* Position Details */}
            <div className="mb-8">
              <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                  POSITION DETAILS
                </h2>
                {positionData && (
                  <p className="text-sm text-white/90 mt-2">
                    Based on template: {positionData.templateTitle}
                  </p>
                )}
              </div>
              
              <div className="p-6 space-y-4">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    Position Title *
                  </label>
                  <input
                    id="title"
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="e.g., Senior Software Engineer - Miami Office"
                  />
                </div>

                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    Position Description
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Brief description of this specific position..."
                  />
                </div>
              </div>
            </div>

            {/* Tab Navigation */}
            <div className="mb-6">
              <div className="border-b border-gray-200">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveTab('questions')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'questions'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    QUESTIONS ({questions.length})
                  </button>
                  <button
                    onClick={() => setActiveTab('keywords')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'keywords'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    <Tag className="w-4 h-4 inline mr-1" />
                    AI KEYWORDS ({keywords.length})
                  </button>
                </nav>
              </div>
            </div>

            {/* Questions Tab */}
            {activeTab === 'questions' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <div className="flex justify-between items-center">
                    <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                      POSITION QUESTIONS
                    </h2>
                    <button
                      onClick={addQuestion}
                      className="tempo-font inline-flex items-center px-3 py-2 border border-white/30 text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors"
                    >
                      <Plus className="h-4 w-4 mr-1" />
                      ADD QUESTION
                    </button>
                  </div>
                  <p className="text-sm text-white/90 mt-2">
                    Customize questions for this position. Changes won't affect the original template.
                  </p>
                </div>

                <div className="p-6 space-y-4">
                  {questions.map((question, index) => (
                    <div key={question.id} className="border border-gray-200 rounded-lg p-4 hover:border-[#10559A]/30 transition-colors">
                      <div className="flex justify-between items-start mb-3">
                        <h3 className="text-sm font-medium text-gray-700 tempo-font">Question {index + 1}</h3>
                        {questions.length > 1 && (
                          <button
                            onClick={() => removeQuestion(question.id)}
                            className="text-[#DC1125] hover:text-red-700 transition-colors"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        )}
                      </div>

                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            Question Text *
                          </label>
                          <textarea
                            value={question.text}
                            onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                            placeholder="Enter your interview question..."
                          />
                        </div>

                        <div className="flex items-center space-x-2">
                          <Clock className="h-4 w-4 text-[#10559A]" />
                          <label className="text-xs font-medium text-gray-600">
                            Time Limit:
                          </label>
                          <select
                            value={question.timeLimit}
                            onChange={(e) => updateQuestion(question.id, 'timeLimit', parseInt(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={30}>30 seconds</option>
                            <option value={60}>1 minute</option>
                            <option value={90}>1.5 minutes</option>
                            <option value={120}>2 minutes</option>
                            <option value={180}>3 minutes</option>
                            <option value={300}>5 minutes</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Keywords Tab */}
            {activeTab === 'keywords' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                    AI KEYWORD MATCHING
                  </h2>
                  <p className="text-sm text-white/90 mt-2">
                    Customize keywords for this position. Changes won't affect the original template.
                  </p>
                </div>

                <div className="p-6">
                  {/* Add New Keyword */}
                  <div className="bg-[#10559A]/10 border border-[#10559A]/20 rounded-lg p-4 mb-6">
                    <h3 className="text-sm font-medium text-[#052049] mb-3 tempo-font tracking-tight">ADD NEW KEYWORD</h3>
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
                      <div className="md:col-span-2">
                        <input
                          type="text"
                          value={newKeyword}
                          onChange={(e) => setNewKeyword(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          placeholder="Enter keyword or phrase..."
                          onKeyPress={(e) => e.key === 'Enter' && addKeyword()}
                        />
                      </div>
                      <div>
                        <select
                          value={newKeywordCategory}
                          onChange={(e) => setNewKeywordCategory(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                        >
                          <option value="technical">🔧 Technical</option>
                          <option value="soft_skills">🤝 Soft Skills</option>
                          <option value="experience">💼 Experience</option>
                          <option value="general">📋 General</option>
                        </select>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="flex items-center space-x-1">
                          <label className="text-xs text-gray-600">Weight:</label>
                          <select
                            value={newKeywordWeight}
                            onChange={(e) => setNewKeywordWeight(parseFloat(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={1}>1x</option>
                            <option value={2}>2x</option>
                            <option value={3}>3x</option>
                            <option value={5}>5x</option>
                          </select>
                        </div>
                        <button
                          onClick={addKeyword}
                          disabled={!newKeyword.trim()}
                          className="tempo-font px-3 py-2 bg-[#DC1125] text-white rounded-md text-sm font-bold hover:bg-[#052049] disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          ADD
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Keywords Display */}
                  {keywords.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <Tag className="w-8 h-8 mx-auto mb-2 text-[#10559A]/40" />
                      <p className="tempo-font text-[#052049] font-medium">NO KEYWORDS CONFIGURED</p>
                      <p className="text-xs">Add keywords above to enable AI-powered candidate scoring</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {Object.entries(keywordsByCategory).map(([category, categoryKeywords]) => (
                        <div key={category} className="border border-[#10559A]/20 rounded-lg p-4 bg-[#10559A]/5">
                          <h3 className="text-sm font-bold text-[#052049] mb-3 flex items-center tempo-font tracking-tight">
                            <span className="mr-2">{getCategoryIcon(category)}</span>
                            {category.replace('_', ' ').toUpperCase()} ({categoryKeywords.length})
                          </h3>
                          <div className="flex flex-wrap gap-2">
                            {categoryKeywords.map((keyword) => (
                              <div
                                key={keyword.id}
                                className={`inline-flex items-center px-3 py-1 rounded-full text-sm border ${getCategoryColor(keyword.category)}`}
                              >
                                <span>{keyword.keyword}</span>
                                {keyword.weight > 1 && (
                                  <span className="ml-1 flex items-center">
                                    <Star className="w-3 h-3 ml-1" />
                                    {keyword.weight}x
                                  </span>
                                )}
                                <button
                                  onClick={() => removeKeyword(keyword.id)}
                                  className="ml-2 text-current hover:text-red-600 transition-colors"
                                >
                                  ×
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Messages */}
            {error && (
              <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-3 flex items-center">
                <AlertCircle className="h-4 w-4 text-red-400 mr-2" />
                <span className="text-sm text-red-700">{error}</span>
              </div>
            )}

            {success && (
              <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-3">
                <span className="text-sm text-green-700">{success}</span>
              </div>
            )}

            {/* Actions */}
            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-[#DC1125] hover:bg-[#052049] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#DC1125] disabled:opacity-50 transition-colors"
              >
                {isSaving ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    UPDATING...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    UPDATE POSITION
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Send to Candidate Modal */}
      {showSendModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center mb-4">
                <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-[#10559A]/10">
                  <Mail className="h-6 w-6 text-[#10559A]" />
                </div>
              </div>
              
              <h3 className="text-lg font-medium text-gray-900 mb-2 text-center tempo-font">Send Interview Invitation</h3>
              <p className="text-sm text-gray-600 mb-4 text-center">
                Send this position's interview to a candidate
              </p>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Candidate Name *
                  </label>
                  <input
                    type="text"
                    value={candidateName}
                    onChange={(e) => setCandidateName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter candidate's full name"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address *
                  </label>
                  <input
                    type="email"
                    value={candidateEmail}
                    onChange={(e) => setCandidateEmail(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="candidate@email.com"
                  />
                </div>

                {sendError && (
                  <div className="bg-red-50 border border-red-200 rounded-md p-3">
                    <span className="text-sm text-red-700">{sendError}</span>
                  </div>
                )}

                {sendSuccess && (
                  <div className="bg-green-50 border border-green-200 rounded-md p-3">
                    <div className="text-sm text-green-700">
                      {sendSuccess.split('\n\n').map((line, index) => (
                        <div key={index} className={index === 0 ? 'font-medium mb-2' : 'text-xs break-all'}>
                          {line.replace('Interview Link: ', '')}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={closeSendModal}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSendInterview}
                    disabled={isSending || !!sendSuccess}
                    className="flex-1 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                  >
                    {isSending ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                        Sending...
                      </>
                    ) : sendSuccess ? (
                      'Sent!'
                    ) : (
                      'Send Interview'
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

"use client"
import React, { useState, useEffect } from 'react';
import { ArrowLeft, Plus, Trash2, Clock, Save, AlertCircle, Tag, Star } from 'lucide-react';

interface Question {
  id: string;
  text: string;
  timeLimit: number;
  question_order: number;
}

interface Keyword {
  id: string;
  keyword: string;
  category: string;
  weight: number;
}

interface TemplateData {
  id: string;
  title: string;
  description: string;
  questions: Question[];
  keywords: Keyword[];
}

export default function EditTemplate({ templateId }: { templateId: string }) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [questions, setQuestions] = useState<Question[]>([]);
  
  // Keywords state
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  const [newKeyword, setNewKeyword] = useState('');
  const [newKeywordCategory, setNewKeywordCategory] = useState('technical');
  const [newKeywordWeight, setNewKeywordWeight] = useState(1);
  
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [activeTab, setActiveTab] = useState<'questions' | 'keywords'>('questions');

  useEffect(() => {
    if (templateId) {
      loadTemplateData();
    }
  }, [templateId]);

  const loadTemplateData = async () => {
    try {
      const token = localStorage.getItem('authToken');
      
      // Load template details
      const templateResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      // Load keywords
      const keywordsResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}/keywords`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      if (templateResponse.ok) {
        const templateData = await templateResponse.json();
        
        // Set template basic info
        setTitle(templateData.title);
        setDescription(templateData.description || '');
        
        // Set questions with proper mapping
        const mappedQuestions = templateData.questions.map((q: any, index: number) => ({
          id: q.id,
          text: q.question_text,
          timeLimit: q.time_limit,
          question_order: q.question_order
        }));
        setQuestions(mappedQuestions);

        // Set keywords
        if (keywordsResponse.ok) {
          const keywordsData = await keywordsResponse.json();
          setKeywords(keywordsData.keywords || []);
        }
      } else {
        setError('Failed to load template data');
      }
    } catch (error) {
      setError('Failed to load template data');
    } finally {
      setIsLoading(false);
    }
  };

  const addQuestion = () => {
    const newQuestion: Question = {
      id: `new-${Date.now()}`,
      text: '',
      timeLimit: 90,
      question_order: questions.length + 1
    };
    setQuestions([...questions, newQuestion]);
  };

  const removeQuestion = (id: string) => {
    if (questions.length > 1) {
      setQuestions(questions.filter(q => q.id !== id).map((q, index) => ({
        ...q,
        question_order: index + 1
      })));
    }
  };

  const updateQuestion = (id: string, field: keyof Question, value: string | number) => {
    setQuestions(questions.map(q => 
      q.id === id ? { ...q, [field]: value } : q
    ));
  };

  // Keyword management functions
  const addKeyword = () => {
    if (!newKeyword.trim()) return;
    
    const keyword: Keyword = {
      id: `new-${Date.now()}`,
      keyword: newKeyword.trim().toLowerCase(),
      category: newKeywordCategory,
      weight: newKeywordWeight
    };
    
    setKeywords([...keywords, keyword]);
    setNewKeyword('');
    setNewKeywordWeight(1);
  };

  const removeKeyword = (id: string) => {
    setKeywords(keywords.filter(k => k.id !== id));
  };

  const updateKeyword = (id: string, field: keyof Keyword, value: string | number) => {
    setKeywords(keywords.map(k => 
      k.id === id ? { ...k, [field]: value } : k
    ));
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical':
        return 'bg-blue-100 text-blue-800';
      case 'soft_skills':
        return 'bg-green-100 text-green-800';
      case 'experience':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical':
        return '🔧';
      case 'soft_skills':
        return '🤝';
      case 'experience':
        return '💼';
      default:
        return '📋';
    }
  };

  const handleSave = async () => {
    setError('');
    setSuccess('');

    // Validation
    if (!title.trim()) {
      setError('Template title is required');
      return;
    }

    const validQuestions = questions.filter(q => q.text.trim() !== '');
    if (validQuestions.length === 0) {
      setError('At least one question is required');
      return;
    }

    setIsSaving(true);

    try {
      const token = localStorage.getItem('authToken');
      
      // Update template basic info
      const updateTemplateResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            title: title.trim(),
            description: description.trim(),
            questions: validQuestions.map((q, index) => ({
              id: q.id.startsWith('new-') ? undefined : q.id, // Let backend generate new IDs
              text: q.text.trim(),
              timeLimit: q.timeLimit,
              question_order: index + 1
            }))
          }),
        }
      );

      if (!updateTemplateResponse.ok) {
        const errorData = await updateTemplateResponse.json();
        throw new Error(errorData.error || 'Failed to update template');
      }

      // Update keywords if any
      if (keywords.length > 0) {
        const keywordsResponse = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}/keywords`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({
              keywords: keywords.map(k => ({
                keyword: k.keyword,
                category: k.category,
                weight: k.weight
              }))
            }),
          }
        );

        if (!keywordsResponse.ok) {
          console.warn('Template updated but keywords failed to save');
        }
      }

      setSuccess('Template updated successfully!');
      
      // Redirect back to dashboard after 2 seconds
      setTimeout(() => {
        window.location.href = '/dashboard';
      }, 2000);

    } catch (error: any) {
      setError(error.message || 'Failed to update template');
    } finally {
      setIsSaving(false);
    }
  };

  const goBack = () => {
    if (window.confirm('Are you sure you want to leave? Any unsaved changes will be lost.')) {
      window.location.href = '/dashboard';
    }
  };

  const keywordsByCategory = keywords.reduce((acc, keyword) => {
    if (!acc[keyword.category]) {
      acc[keyword.category] = [];
    }
    acc[keyword.category].push(keyword);
    return acc;
  }, {} as Record<string, Keyword[]>);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Carnival-Branded Header - SOLID NAVY */}
      <header className="bg-[#052049] shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center h-16">
            <button
              onClick={goBack}
              className="flex items-center text-white hover:text-gray-300 mr-4 transition-colors"
            >
              <ArrowLeft className="h-5 w-5 mr-1" />
              Back to Dashboard
            </button>
            <h1 className="text-xl font-bold text-white tempo-font tracking-tight">
              EDIT INTERVIEW TEMPLATE
            </h1>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow">
          <div className="p-6">
            {/* Template Details */}
            <div className="mb-8">
              <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                  TEMPLATE DETAILS
                </h2>
              </div>
              
              <div className="p-6 space-y-4">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    Template Title *
                  </label>
                  <input
                    id="title"
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="e.g., Software Engineer Interview"
                  />
                </div>

                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    Description
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Brief description of this interview template..."
                  />
                </div>
              </div>
            </div>

            {/* Carnival-Branded Tab Navigation */}
            <div className="mb-6">
              <div className="border-b border-gray-200">
                <nav className="-mb-px flex space-x-8">
                  <button
                    onClick={() => setActiveTab('questions')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'questions'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    QUESTIONS ({questions.length})
                  </button>
                  <button
                    onClick={() => setActiveTab('keywords')}
                    className={`tempo-font whitespace-nowrap py-4 px-1 border-b-2 font-bold text-sm tracking-tight transition-colors ${
                      activeTab === 'keywords'
                        ? 'border-[#DC1125] text-[#DC1125]'
                        : 'border-transparent text-gray-500 hover:text-[#10559A] hover:border-[#10559A]'
                    }`}
                  >
                    <Tag className="w-4 h-4 inline mr-1" />
                    AI KEYWORDS ({keywords.length})
                  </button>
                </nav>
              </div>
            </div>

            {/* Questions Tab */}
            {activeTab === 'questions' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <div className="flex justify-between items-center">
                    <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                      INTERVIEW QUESTIONS
                    </h2>
                    <button
                      onClick={addQuestion}
                      className="tempo-font inline-flex items-center px-3 py-2 border border-white/30 text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors"
                    >
                      <Plus className="h-4 w-4 mr-1" />
                      ADD QUESTION
                    </button>
                  </div>
                </div>

                <div className="p-6 space-y-4">
                  {questions.map((question, index) => (
                    <div key={question.id} className="border border-gray-200 rounded-lg p-4 hover:border-[#10559A]/30 transition-colors">
                      <div className="flex justify-between items-start mb-3">
                        <h3 className="text-sm font-medium text-gray-700 tempo-font">Question {index + 1}</h3>
                        {questions.length > 1 && (
                          <button
                            onClick={() => removeQuestion(question.id)}
                            className="text-[#DC1125] hover:text-red-700 transition-colors"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        )}
                      </div>

                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            Question Text *
                          </label>
                          <textarea
                            value={question.text}
                            onChange={(e) => updateQuestion(question.id, 'text', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                            placeholder="Enter your interview question..."
                          />
                        </div>

                        <div className="flex items-center space-x-2">
                          <Clock className="h-4 w-4 text-[#10559A]" />
                          <label className="text-xs font-medium text-gray-600">
                            Time Limit:
                          </label>
                          <select
                            value={question.timeLimit}
                            onChange={(e) => updateQuestion(question.id, 'timeLimit', parseInt(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={30}>30 seconds</option>
                            <option value={60}>1 minute</option>
                            <option value={90}>1.5 minutes</option>
                            <option value={120}>2 minutes</option>
                            <option value={180}>3 minutes</option>
                            <option value={300}>5 minutes</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Keywords Tab */}
            {activeTab === 'keywords' && (
              <div className="mb-8">
                <div className="p-4 border-b border-gray-200 bg-[#10559A] rounded-t-lg">
                  <h2 className="text-lg font-bold text-white tempo-font tracking-tight">
                    AI KEYWORD MATCHING
                  </h2>
                  <p className="text-sm text-white/90 mt-2">
                    Add keywords that you want to find in candidate responses. These will be used to automatically score candidates based on their speech.
                  </p>
                </div>

                <div className="p-6">
                  {/* Add New Keyword */}
                  <div className="bg-[#10559A]/10 border border-[#10559A]/20 rounded-lg p-4 mb-6">
                    <h3 className="text-sm font-medium text-[#052049] mb-3 tempo-font tracking-tight">ADD NEW KEYWORD</h3>
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
                      <div className="md:col-span-2">
                        <input
                          type="text"
                          value={newKeyword}
                          onChange={(e) => setNewKeyword(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          placeholder="Enter keyword or phrase..."
                          onKeyPress={(e) => e.key === 'Enter' && addKeyword()}
                        />
                      </div>
                      <div>
                        <select
                          value={newKeywordCategory}
                          onChange={(e) => setNewKeywordCategory(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                        >
                          <option value="technical">🔧 Technical</option>
                          <option value="soft_skills">🤝 Soft Skills</option>
                          <option value="experience">💼 Experience</option>
                          <option value="general">📋 General</option>
                        </select>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="flex items-center space-x-1">
                          <label className="text-xs text-gray-600">Weight:</label>
                          <select
                            value={newKeywordWeight}
                            onChange={(e) => setNewKeywordWeight(parseFloat(e.target.value))}
                            className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                          >
                            <option value={1}>1x</option>
                            <option value={2}>2x</option>
                            <option value={3}>3x</option>
                            <option value={5}>5x</option>
                          </select>
                        </div>
                        <button
                          onClick={addKeyword}
                          disabled={!newKeyword.trim()}
                          className="tempo-font px-3 py-2 bg-[#DC1125] text-white rounded-md text-sm font-bold hover:bg-[#052049] disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          ADD
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Keywords Display */}
                  {keywords.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <Tag className="w-8 h-8 mx-auto mb-2 text-[#10559A]/40" />
                      <p className="tempo-font text-[#052049] font-medium">NO KEYWORDS ADDED YET</p>
                      <p className="text-xs">Add keywords above to enable AI-powered candidate scoring</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {Object.entries(keywordsByCategory).map(([category, categoryKeywords]) => (
                        <div key={category} className="border border-[#10559A]/20 rounded-lg p-4 bg-[#10559A]/5">
                          <h3 className="text-sm font-bold text-[#052049] mb-3 flex items-center tempo-font tracking-tight">
                            <span className="mr-2">{getCategoryIcon(category)}</span>
                            {category.replace('_', ' ').toUpperCase()} ({categoryKeywords.length})
                          </h3>
                          <div className="flex flex-wrap gap-2">
                            {categoryKeywords.map((keyword) => (
                              <div
                                key={keyword.id}
                                className={`inline-flex items-center px-3 py-1 rounded-full text-sm border ${getCategoryColor(keyword.category)}`}
                              >
                                <span>{keyword.keyword}</span>
                                {keyword.weight > 1 && (
                                  <span className="ml-1 flex items-center">
                                    <Star className="w-3 h-3 ml-1" />
                                    {keyword.weight}x
                                  </span>
                                )}
                                <button
                                  onClick={() => removeKeyword(keyword.id)}
                                  className="ml-2 text-current hover:text-red-600 transition-colors"
                                >
                                  ×
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Messages */}
            {error && (
              <div className="mb-4 bg-red-50 border border-red-200 rounded-md p-3 flex items-center">
                <AlertCircle className="h-4 w-4 text-red-400 mr-2" />
                <span className="text-sm text-red-700">{error}</span>
              </div>
            )}

            {success && (
              <div className="mb-4 bg-green-50 border border-green-200 rounded-md p-3">
                <span className="text-sm text-green-700">{success}</span>
              </div>
            )}

            {/* Carnival-Branded Actions */}
            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-[#DC1125] hover:bg-[#052049] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#DC1125] disabled:opacity-50 transition-colors"
              >
                {isSaving ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    UPDATING...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    UPDATE TEMPLATE
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Replace your LoginPage.tsx component with this enhanced version:

"use client"
import React, { useState } from 'react';
import { Eye, EyeOff, LogIn, AlertCircle, Ship, Anchor } from 'lucide-react';

export default function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async (e: React.FormEvent) => {
    console.log('About to make fetch request');
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      console.log('About to fetch login...');
      const response = await fetch('http://localhost:5000/api/auth/test', {
        method: 'POST',
         mode: 'cors', // Add this
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        // Store the JWT token
        localStorage.setItem('authToken', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        
        // Redirect to dashboard
        window.location.href = '/dashboard';
        console.log('User logged in:', data.user);
      } else {
        setError(data.error || 'Login failed');
      }
    } catch (error) {
      setError('Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#052049] via-[#10559A] to-[#DC1125] flex items-center justify-center p-4 relative overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-10 -left-10 w-40 h-40 bg-white/5 rounded-full blur-xl"></div>
        <div className="absolute top-1/3 -right-10 w-60 h-60 bg-white/5 rounded-full blur-xl"></div>
        <div className="absolute -bottom-10 left-1/3 w-80 h-80 bg-white/5 rounded-full blur-xl"></div>
        
        {/* Enhanced Floating Icons with Brighter Glow and Staggered Animations */}
        {/* Top Row */}
        <Anchor className="absolute top-12 left-16 h-5 w-5 text-white/40 animate-pulse drop-shadow-lg" style={{animationDelay: '0s', animationDuration: '3s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.3))'}} />
        <Ship className="absolute top-20 right-24 h-7 w-7 text-white/35 animate-pulse drop-shadow-lg" style={{animationDelay: '0.5s', animationDuration: '4s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.25))'}} />
        <Anchor className="absolute top-32 left-1/4 h-4 w-4 text-white/30 animate-pulse drop-shadow-md" style={{animationDelay: '1s', animationDuration: '3.5s', filter: 'drop-shadow(0 0 6px rgba(255,255,255,0.2))'}} />
        <Ship className="absolute top-16 right-1/3 h-6 w-6 text-white/38 animate-pulse drop-shadow-lg" style={{animationDelay: '1.5s', animationDuration: '2.8s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.28))'}} />
        
        {/* Middle Row */}
        <Ship className="absolute top-1/2 left-12 h-6 w-6 text-white/33 animate-pulse drop-shadow-lg" style={{animationDelay: '2s', animationDuration: '3.2s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.23))'}} />
        <Anchor className="absolute top-1/2 right-16 h-5 w-5 text-white/36 animate-pulse drop-shadow-lg" style={{animationDelay: '2.5s', animationDuration: '4.2s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.26))'}} />
        <Ship className="absolute top-1/3 left-1/2 h-4 w-4 text-white/28 animate-pulse drop-shadow-md" style={{animationDelay: '3s', animationDuration: '2.5s', filter: 'drop-shadow(0 0 6px rgba(255,255,255,0.18))'}} />
        <Anchor className="absolute top-2/3 right-1/4 h-6 w-6 text-white/34 animate-pulse drop-shadow-lg" style={{animationDelay: '3.5s', animationDuration: '3.8s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.24))'}} />
        
        {/* Bottom Row */}
        <Anchor className="absolute bottom-24 left-20 h-5 w-5 text-white/37 animate-pulse drop-shadow-lg" style={{animationDelay: '4s', animationDuration: '3.3s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.27))'}} />
        <Ship className="absolute bottom-32 right-28 h-7 w-7 text-white/32 animate-pulse drop-shadow-lg" style={{animationDelay: '4.5s', animationDuration: '2.7s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.22))'}} />
        <Anchor className="absolute bottom-16 left-1/3 h-4 w-4 text-white/31 animate-pulse drop-shadow-md" style={{animationDelay: '5s', animationDuration: '4.1s', filter: 'drop-shadow(0 0 6px rgba(255,255,255,0.21))'}} />
        <Ship className="absolute bottom-28 right-1/3 h-5 w-5 text-white/35 animate-pulse drop-shadow-lg" style={{animationDelay: '5.5s', animationDuration: '3.6s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.25))'}} />
        
        {/* Additional Scattered Icons for More Random Feel */}
        <Anchor className="absolute top-1/4 left-1/3 h-3 w-3 text-white/25 animate-pulse drop-shadow-sm" style={{animationDelay: '6s', animationDuration: '2.9s', filter: 'drop-shadow(0 0 4px rgba(255,255,255,0.15))'}} />
        <Ship className="absolute top-3/4 right-1/2 h-5 w-5 text-white/34 animate-pulse drop-shadow-lg" style={{animationDelay: '0.2s', animationDuration: '3.4s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.24))'}} />
        <Anchor className="absolute bottom-1/3 left-2/3 h-4 w-4 text-white/29 animate-pulse drop-shadow-md" style={{animationDelay: '1.2s', animationDuration: '4.3s', filter: 'drop-shadow(0 0 6px rgba(255,255,255,0.19))'}} />
        <Ship className="absolute top-40 left-3/4 h-6 w-6 text-white/33 animate-pulse drop-shadow-lg" style={{animationDelay: '2.7s', animationDuration: '2.6s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.23))'}} />
        <Anchor className="absolute bottom-40 right-1/5 h-5 w-5 text-white/36 animate-pulse drop-shadow-lg" style={{animationDelay: '3.3s', animationDuration: '3.7s', filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.26))'}} />
        
        {/* Corner Icons */}
        <Ship className="absolute top-8 left-8 h-4 w-4 text-white/26 animate-pulse drop-shadow-sm" style={{animationDelay: '1.8s', animationDuration: '4.4s', filter: 'drop-shadow(0 0 4px rgba(255,255,255,0.16))'}} />
        <Anchor className="absolute top-10 right-10 h-3 w-3 text-white/24 animate-pulse drop-shadow-sm" style={{animationDelay: '4.2s', animationDuration: '2.8s', filter: 'drop-shadow(0 0 4px rgba(255,255,255,0.14))'}} />
        <Ship className="absolute bottom-12 left-10 h-5 w-5 text-white/30 animate-pulse drop-shadow-md" style={{animationDelay: '0.8s', animationDuration: '3.9s', filter: 'drop-shadow(0 0 6px rgba(255,255,255,0.20))'}} />
        <Anchor className="absolute bottom-8 right-8 h-4 w-4 text-white/27 animate-pulse drop-shadow-sm" style={{animationDelay: '5.2s', animationDuration: '3.1s', filter: 'drop-shadow(0 0 4px rgba(255,255,255,0.17))'}} />
      </div>
    <div className="max-w-md w-full space-y-8 relative z-10">
        {/* Header */}
        <div className="text-center">
          <div className="mx-auto mb-0">
            <img 
              src="/images/carnival-logo.png" 
              alt="Carnival Logo" 
              className="h-35 w-35 mx-auto object-contain"
              onError={(e) => {
                e.currentTarget.style.display = 'none';
                e.currentTarget.nextElementSibling?.classList.remove('hidden');
              }}
            />
            <Ship className="h-12 w-12 text-white mx-auto hidden" />
          </div>
          
          <h2 className="text-4xl font-bold text-white mb-2 tempo-font tracking-tight">
            CARNIVAL VIP
          </h2>
          <p className="text-xl text-white/90 tempo-font tracking-tight mb-2">
            RECRUITMENT PORTAL
          </p>
          <p className="text-sm text-white/70">
            Secure access to interview management system
          </p>
        </div>

        {/* Login Form */}
        <div className="bg-white/10 backdrop-blur-md rounded-2xl shadow-2xl p-8 border border-white/20">
          <form onSubmit={handleLogin} className="space-y-6">
            {/* Email Field */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-white mb-2 tempo-font tracking-tight">
                EMAIL ADDRESS
              </label>
              <input
                id="email"
                type="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-lg shadow-sm placeholder-white/50 text-white focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 backdrop-blur-sm"
                placeholder="Enter your email address"
              />
            </div>

            {/* Password Field */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-white mb-2 tempo-font tracking-tight">
                PASSWORD
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full px-4 py-3 pr-12 bg-white/20 border border-white/30 rounded-lg shadow-sm placeholder-white/50 text-white focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-white/50 backdrop-blur-sm"
                  placeholder="Enter your password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-4 flex items-center text-white/70 hover:text-white transition-colors"
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
            </div>

            {/* Error Message */}
            {error && (
              <div className="bg-red-500/20 border border-red-400/30 rounded-lg p-4 flex items-center backdrop-blur-sm">
                <AlertCircle className="h-5 w-5 text-red-300 mr-3 flex-shrink-0" />
                <span className="text-sm text-red-200">{error}</span>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isLoading}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-sm font-bold text-[#052049] bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white/50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 tempo-font tracking-tight transform hover:scale-105"
            >
              {isLoading ? (
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-[#052049] mr-3"></div>
                  SIGNING IN...
                </div>
              ) : (
                <div className="flex items-center">
                  <LogIn className="h-5 w-5 mr-2" />
                  SIGN IN TO VIP PORTAL
                </div>
              )}
            </button>
          </form>

          {/* Demo Credentials */}
          <div className="mt-8 p-4 bg-white/5 rounded-lg border border-white/10 backdrop-blur-sm">
            <h3 className="text-sm font-bold text-white mb-2 tempo-font tracking-tight">
              DEMO ACCESS
            </h3>
            <div className="text-xs text-white/80 space-y-1">
              <p><strong>Email:</strong> test@company.com</p>
              <p><strong>Password:</strong> password123</p>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center">
          <div className="flex items-center justify-center space-x-4 text-white/60 text-sm">
            <Ship className="h-4 w-4" />
            <span>Carnival Cruise Lines • VIP Recruitment System</span>
            <Anchor className="h-4 w-4" />
          </div>
          <p className="text-xs text-white/50 mt-2">
            Secure • Professional • Maritime Excellence
          </p>
        </div>
      </div>
    </div>
  );
}

"use client"
import React, { useState, useEffect } from 'react';
import UnifiedHeader from './UnifiedHeader';
import { 
  Plus, 
  MapPin, 
  Users, 
  Eye, 
  Calendar, 
  Clock, 
  Mail, 
  CheckCircle, 
  AlertCircle, 
  Filter, 
  X, 
  Search, 
  ArrowUpDown, 
  ChevronUp, 
  ChevronDown, 
  ChevronLeft, 
  ChevronRight,
  Edit3,
  Trash2,
  Send,
  Star,
  Tag,
  Play
} from 'lucide-react';

interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
}

interface Position {
  id: string;
  title: string;
  description: string;
  template_id: string;
  created_by: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  templateTitle?: string;
  candidateCount?: number;
  completedCount?: number;
}

interface Template {
  id: string;
  title: string;
  description: string;
  created_at: string;
  is_active: boolean;
}

type SortDirection = 'asc' | 'desc' | null;
interface SortConfig {
  key: string;
  direction: SortDirection;
}

export default function PositionDashboard() {
  const [user, setUser] = useState<User | null>(null);
  const [positions, setPositions] = useState<Position[]>([]);
  const [templates, setTemplates] = useState<Template[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  
  // Filtering and search state
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [templateFilter, setTemplateFilter] = useState('all');
  const [showFilters, setShowFilters] = useState(false);
  
  // Sorting state
  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'created_at', direction: 'desc' });
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Create position modal state
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedTemplateId, setSelectedTemplateId] = useState('');
  const [newPositionTitle, setNewPositionTitle] = useState('');
  const [newPositionDescription, setNewPositionDescription] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [createError, setCreateError] = useState('');

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      setUser(JSON.parse(userData));
    }
    fetchPositions();
    fetchTemplates();
  }, []);

  const fetchPositions = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setPositions(data);
      } else {
        const errorData = await response.json();
        setError(`Failed to fetch positions: ${errorData.error || response.statusText}`);
      }
    } catch (error) {
      setError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchTemplates = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setTemplates(data.filter((t: Template) => t.is_active));
      }
    } catch (error) {
      console.error('Failed to fetch templates:', error);
    }
  };

  const handleSort = (key: string) => {
    let direction: SortDirection = 'asc';
    if (sortConfig.key === key) {
      if (sortConfig.direction === 'asc') direction = 'desc';
      else if (sortConfig.direction === 'desc') direction = null;
      else direction = 'asc';
    }
    setSortConfig({ key, direction });
    setCurrentPage(1);
  };

  const getSortIcon = (key: string) => {
    if (sortConfig.key !== key) {
      return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
    }
    if (sortConfig.direction === 'asc') {
      return <ChevronUp className="w-4 h-4 text-[#DC1125]" />;
    }
    if (sortConfig.direction === 'desc') {
      return <ChevronDown className="w-4 h-4 text-[#DC1125]" />;
    }
    return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
  };

  const getFilteredAndSortedPositions = () => {
      if (!positions || !Array.isArray(positions)) {
    return [];
  }
    let filtered = [...(positions || [])];

    // Apply filters
    if (statusFilter !== 'all') {
      filtered = filtered.filter(position => {
        if (statusFilter === 'active') return position.is_active;
        if (statusFilter === 'inactive') return !position.is_active;
        return true;
      });
    }

    if (templateFilter !== 'all') {
      filtered = filtered.filter(position => position.template_id === templateFilter);
    }

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(position =>
        position.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (position.description && position.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (position.templateTitle && position.templateTitle.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // Apply sorting
    if (sortConfig.direction) {
      filtered.sort((a, b) => {
        let aValue: any = a[sortConfig.key as keyof Position];
        let bValue: any = b[sortConfig.key as keyof Position];

        if (sortConfig.key === 'created_at' || sortConfig.key === 'updated_at') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        } else if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (sortConfig.direction === 'asc') {
          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
        } else {
          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
        }
      });
    }

    return filtered;
  };

  const getPaginatedData = (data: Position[]) => {
      if (!data || !Array.isArray(data)) {
    return { data: [], totalPages: 0, totalItems: 0 };
  }
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return {
      data: data.slice(startIndex, endIndex),
      totalPages: Math.ceil(data.length / itemsPerPage),
      totalItems: data.length
    };
  };

  const handleCreatePosition = () => {
    setShowCreateModal(true);
    setSelectedTemplateId('');
    setNewPositionTitle('');
    setNewPositionDescription('');
    setCreateError('');
  };

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplateId(templateId);
    const selectedTemplate = templates.find(t => t.id === templateId);
    if (selectedTemplate) {
      setNewPositionTitle(`${selectedTemplate.title} - Position`);
      setNewPositionDescription(selectedTemplate.description || '');
    }
  };

  const submitCreatePosition = async () => {
    if (!newPositionTitle.trim()) {
      setCreateError('Position title is required');
      return;
    }

    setIsCreating(true);
    setCreateError('');

    try {
      const token = localStorage.getItem('authToken');
      
      if (selectedTemplateId) {
        // Create position from template
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/positions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            title: newPositionTitle.trim(),
            description: newPositionDescription.trim(),
            template_id: selectedTemplateId,
          }),
        });

        if (response.ok) {
          setShowCreateModal(false);
          fetchPositions(); // Refresh the list
        } else {
          const errorData = await response.json();
          setCreateError(errorData.error || 'Failed to create position');
        }
      } else {
        // Navigate to create position page for custom creation
        window.location.href = '/create-position';
      }
    } catch (error: any) {
      setCreateError(error.message || 'Network error. Please try again.');
    } finally {
      setIsCreating(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const SortableHeader = ({ label, sortKey }: { label: string; sortKey: string }) => (
    <th className="px-6 py-3 text-left text-xs font-bold text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors tempo-font">
      <button
        onClick={() => handleSort(sortKey)}
        className="flex items-center space-x-1 w-full text-left"
      >
        <span>{label}</span>
        {getSortIcon(sortKey)}
      </button>
    </th>
  );

  const filteredPositions = getFilteredAndSortedPositions();
  const paginatedData = getPaginatedData(filteredPositions);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader currentPage="positions" user={user} />
        <div className="flex items-center justify-center py-20">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <UnifiedHeader currentPage="positions" user={user} />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header with Create Button */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-[#052049] tempo-font tracking-tight">
              JOB POSITIONS
            </h1>
            <p className="text-gray-600 mt-2">
              Manage and create job positions for candidate interviews
            </p>
          </div>
          <button
            onClick={handleCreatePosition}
            className="tempo-font inline-flex items-center px-6 py-3 border border-transparent text-sm font-bold rounded-md text-white bg-[#DC1125] hover:bg-[#052049] transition-colors shadow-lg"
          >
            <Plus className="h-5 w-5 mr-2" />
            CREATE POSITION
          </button>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-4 border-b border-gray-200 bg-[#10559A]">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-bold text-white tempo-font tracking-tight">POSITION FILTERS</h3>
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="inline-flex items-center px-3 py-2 border border-white/30 shadow-sm text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 tempo-font transition-colors"
              >
                <Filter className="w-4 h-4 mr-2" />
                {showFilters ? 'HIDE FILTERS' : 'SHOW FILTERS'}
              </button>
            </div>
          </div>

          {showFilters && (
            <div className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                  SEARCH POSITIONS
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Search by title, description, or template..."
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    STATUS
                  </label>
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  >
                    <option value="all">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    TEMPLATE
                  </label>
                  <select
                    value={templateFilter}
                    onChange={(e) => setTemplateFilter(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  >
                    <option value="all">All Templates</option>
                    {templates.map(template => (
                      <option key={template.id} value={template.id}>
                        {template.title}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Positions Table */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200 bg-[#052049]">
            <h2 className="text-2xl font-bold text-white tempo-font tracking-tight">
              POSITIONS ({filteredPositions.length})
            </h2>
          </div>

          {error && (
            <div className="p-6 bg-red-50 border-b border-red-200">
              <span className="text-sm text-red-700">{error}</span>
            </div>
          )}

          {paginatedData.data.length === 0 ? (
            <div className="text-center py-12">
              <MapPin className="mx-auto h-12 w-12 text-[#DC1125]/60" />
              <h3 className="mt-2 text-lg font-bold text-[#052049] tempo-font tracking-tight">
                {positions.length === 0 ? 'NO POSITIONS CREATED' : 'NO POSITIONS FOUND'}
              </h3>
              <p className="mt-1 text-sm text-gray-500 mb-4">
                {positions.length === 0
                  ? "Create your first job position to start interviewing candidates."
                  : "Try adjusting your search or filter criteria."
                }
              </p>
              {positions.length === 0 && (
                <button
                  onClick={handleCreatePosition}
                  className="tempo-font inline-flex items-center px-4 py-2 border border-transparent text-sm font-bold rounded-md text-white bg-[#DC1125] hover:bg-[#052049] transition-colors"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  CREATE FIRST POSITION
                </button>
              )}
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <SortableHeader label="POSITION TITLE" sortKey="title" />
                      <SortableHeader label="STATUS" sortKey="is_active" />
                      <SortableHeader label="CREATED" sortKey="created_at" />
                      <SortableHeader label="TEMPLATE" sortKey="templateTitle" />
                      <th className="px-6 py-3 text-right text-xs font-bold text-gray-500 uppercase tracking-wider tempo-font">
                        ACTIONS
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedData.data.map((position) => (
                      <tr key={position.id} className="hover:bg-[#10559A]/5 transition-colors">
                        <td className="px-6 py-4">
                          <div>
                            <div className="text-sm font-bold text-[#052049] tempo-font">
                              {position.title}
                            </div>
                            {position.description && (
                              <div className="text-sm text-gray-500 mt-1 line-clamp-2">
                                {position.description}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full tempo-font ${
                            position.is_active
                              ? 'bg-green-100 text-green-800'
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {position.is_active ? 'ACTIVE' : 'INACTIVE'}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          {formatDate(position.created_at)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {position.templateTitle || 'N/A'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                          <button
                            onClick={() => window.location.href = `/edit-position/${position.id}`}
                            className="tempo-font text-[#10559A] hover:text-[#052049] font-bold transition-colors"
                          >
                            EDIT
                          </button>
                          <button
                            onClick={() => window.location.href = `/positions/${position.id}/candidates`}
                            className="tempo-font text-[#DC1125] hover:text-red-700 font-bold transition-colors"
                          >
                            VIEW
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* Pagination */}
              <div className="flex items-center justify-between px-6 py-3 bg-white border-t border-gray-200">
                <div className="flex-1 flex justify-between sm:hidden">
                  <button
                    onClick={() => setCurrentPage(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(currentPage + 1)}
                    disabled={currentPage === paginatedData.totalPages}
                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Next
                  </button>
                </div>
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700 tempo-font">
                      Showing <span className="font-bold text-[#052049]">{((currentPage - 1) * itemsPerPage) + 1}</span> to{' '}
                      <span className="font-bold text-[#052049]">{Math.min(currentPage * itemsPerPage, paginatedData.totalItems)}</span> of{' '}
                      <span className="font-bold text-[#052049]">{paginatedData.totalItems}</span> positions
                    </p>
                  </div>
                  <div>
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                      <button
                        onClick={() => setCurrentPage(currentPage - 1)}
                        disabled={currentPage === 1}
                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronLeft className="h-5 w-5" />
                      </button>
                      
                      {Array.from({ length: Math.min(paginatedData.totalPages, 5) }, (_, i) => {
                        const page = i + 1;
                        return (
                          <button
                            key={page}
                            onClick={() => setCurrentPage(page)}
                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-bold tempo-font ${
                              page === currentPage
                                ? 'z-10 bg-[#DC1125] border-[#DC1125] text-white'
                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                            }`}
                          >
                            {page}
                          </button>
                        );
                      })}
                      
                      <button
                        onClick={() => setCurrentPage(currentPage + 1)}
                        disabled={currentPage === paginatedData.totalPages}
                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronRight className="h-5 w-5" />
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Create Position Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 bg-[#052049]">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-bold text-white tempo-font tracking-tight">
                  CREATE NEW POSITION
                </h3>
                <button
                  onClick={() => setShowCreateModal(false)}
                  className="text-white hover:text-gray-300"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
            </div>
            
            <div className="p-6">
              <div className="space-y-6">
                {/* Template Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Start from Template (Optional)
                  </label>
                  <div className="grid grid-cols-1 gap-3 max-h-60 overflow-y-auto">
                    <div
                      onClick={() => handleTemplateSelect('')}
                      className={`p-4 border-2 rounded-lg cursor-pointer transition-colors ${
                        selectedTemplateId === ''
                          ? 'border-[#DC1125] bg-[#DC1125]/5'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="font-medium text-gray-900">Start from Scratch</div>
                      <div className="text-sm text-gray-500">Create a custom position without using a template</div>
                    </div>
                    
                    {templates.map(template => (
                      <div
                        key={template.id}
                        onClick={() => handleTemplateSelect(template.id)}
                        className={`p-4 border-2 rounded-lg cursor-pointer transition-colors ${
                          selectedTemplateId === template.id
                            ? 'border-[#DC1125] bg-[#DC1125]/5'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="font-medium text-gray-900">{template.title}</div>
                        <div className="text-sm text-gray-500">{template.description || 'No description'}</div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Position Details */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Position Title *
                    </label>
                    <input
                      type="text"
                      value={newPositionTitle}
                      onChange={(e) => setNewPositionTitle(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                      placeholder="Enter position title..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Position Description
                    </label>
                    <textarea
                      value={newPositionDescription}
                      onChange={(e) => setNewPositionDescription(e.target.value)}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                      placeholder="Brief description of this position..."
                    />
                  </div>
                </div>

                {createError && (
                  <div className="bg-red-50 border border-red-200 rounded-md p-3">
                    <span className="text-sm text-red-700">{createError}</span>
                  </div>
                )}
              </div>
            </div>

            <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => setShowCreateModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={submitCreatePosition}
                disabled={isCreating || !newPositionTitle.trim()}
                className="tempo-font inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white bg-[#DC1125] hover:bg-[#052049] disabled:opacity-50"
              >
                {isCreating ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    CREATING...
                  </>
                ) : selectedTemplateId ? (
                  <>
                    <Plus className="h-4 w-4 mr-2" />
                    CREATE FROM TEMPLATE
                  </>
                ) : (
                  <>
                    <Plus className="h-4 w-4 mr-2" />
                    CREATE CUSTOM POSITION
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// frontend/src/components/UnifiedHeader.tsx
"use client"
import React from 'react';
import { MapPin, Play, Star, Users, BarChart3, LogOut, Ship } from 'lucide-react';

interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
}

interface UnifiedHeaderProps {
  currentPage: 'positions' | 'templates' | 'evaluations' | 'candidates' | 'analytics';
  user?: User | null;
}

export default function UnifiedHeader({ currentPage, user }: UnifiedHeaderProps) {
  const handleLogout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    window.location.href = '/';
  };

  const navigationItems = [
    {
      key: 'positions',
      label: 'Positions',
      icon: MapPin,
      href: '/positions',
      description: 'Job Positions'
    },
    {
      key: 'templates',
      label: 'Templates', 
      icon: Play,
      href: '/dashboard',
      description: 'Interview Templates'
    },
    {
      key: 'evaluations',
      label: 'Evaluations',
      icon: Star,
      href: '/review',
      description: 'Video Reviews'
    },
    {
      key: 'candidates',
      label: 'Candidates',
      icon: Users,
      href: '/candidates',
      description: 'Candidate Management'
    },
    {
      key: 'analytics',
      label: 'Analytics',
      icon: BarChart3,
      href: '/analytics',
      description: 'Reports & Analytics'
    }
  ];

  return (
    <div className="bg-white shadow-sm border-b border-gray-200">
      {/* Top Brand Bar */}
      <div className="bg-[#052049]">
        <div className="px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-12">
            <div className="flex items-center">
              <img 
                src="/images/carnival-logo.png" 
                alt="Carnival Logo" 
                className="h-8 w-8 mr-2 object-contain"
              />
              <span className="text-lg font-bold text-white tempo-font tracking-tight">
                CARNIVAL VIP
              </span>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-xs text-white/80">
                Welcome, {user?.first_name} {user?.last_name}
              </div>
              <button
                onClick={handleLogout}
                className="flex items-center text-gray-300 hover:text-white transition-colors text-xs"
              >
                <LogOut className="h-3 w-3 mr-1" />
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Navigation Tabs */}
      <div className="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
        <nav className="flex space-x-0">
          {navigationItems.map((item) => {
            const Icon = item.icon;
            const isActive = currentPage === item.key;
            
            return (
              <button
                key={item.key}
                onClick={() => window.location.href = item.href}
                className={`tempo-font relative px-6 py-4 text-sm font-bold tracking-tight transition-all duration-200 border-b-3 ${
                  isActive
                    ? 'border-[#DC1125] text-[#DC1125] bg-[#DC1125]/5'
                    : 'border-transparent text-gray-600 hover:text-[#10559A] hover:bg-gray-50 hover:border-[#10559A]/30'
                }`}
              >
                <div className="flex items-center space-x-2">
                  <Icon className={`h-4 w-4 ${
                    isActive ? 'text-[#DC1125]' : 'text-gray-500'
                  }`} />
                  <span>{item.label.toUpperCase()}</span>
                </div>
                
                {/* Active indicator */}
                {isActive && (
                  <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-[#DC1125] to-[#052049] rounded-t-lg"></div>
                )}
              </button>
            );
          })}
        </nav>
      </div>
    </div>
  );
}

"use client"
import React, { useState, useRef, useEffect } from 'react';
import { Play, Square, AlertCircle, CheckCircle, Camera, Mic } from 'lucide-react';

interface VideoRecorderProps {
  sessionId: string;
  questionId: string;
  questionText: string;
  timeLimit: number; // in seconds
  onRecordingComplete: (blob: Blob) => void;
  onNext: () => void;
}

export default function VideoRecorder({ 
  sessionId,
  questionId,
  questionText, 
  timeLimit, 
  onRecordingComplete, 
  onNext 
}: VideoRecorderProps) {
  const [isRecording, setIsRecording] = useState(false);
  const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);
  const [timeRemaining, setTimeRemaining] = useState(timeLimit);
  const [hasPermission, setHasPermission] = useState(false);
  const [error, setError] = useState<string>('');
  const [isStarting, setIsStarting] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Database progress tracking
  const [hasRecorded, setHasRecorded] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [isLoadingProgress, setIsLoadingProgress] = useState(true);

  const videoRef = useRef<HTMLVideoElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const chunksRef = useRef<Blob[]>([]);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // Load progress from database on component mount
  useEffect(() => {
    setRecordedBlob(null);
    setHasRecorded(false);
    setIsCompleted(false);
    setError('');
    setTimeRemaining(timeLimit);
    loadProgress();
    setupCamera();

    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [sessionId, questionId]);

  const loadProgress = async () => {
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/question/${questionId}/progress`
      );
      
      if (response.ok) {
        const data = await response.json();
        setIsCompleted(data.isCompleted);
        setHasRecorded(data.isCompleted);
      }
    } catch (error) {
      console.error('Failed to load progress:', error);
    } finally {
      setIsLoadingProgress(false);
    }
  };

  const setupCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          frameRate: { ideal: 30 }
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      });
      
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      setHasPermission(true);
    } catch (err) {
      setError('Camera access denied. Please allow camera and microphone permissions.');
      console.error('Camera setup error:', err);
    }
  };

  const recordAttempt = async () => {
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/question/${questionId}/attempt`,
        { method: 'POST' }
      );
      
      if (response.ok) {
        return true;
      } else {
        const data = await response.json();
        setError(data.error || 'Cannot record for this question');
        return false;
      }
    } catch (error) {
      setError('Failed to record attempt');
      return false;
    }
  };

  const startRecording = async () => {
    if (!streamRef.current || isStarting || isRecording) {
      return;
    }

    if (hasRecorded || isCompleted) {
      setError('You have already answered this question');
      return;
    }

    setIsStarting(true);
    setError('');

    try {
      const canRecord = await recordAttempt();
      if (!canRecord) {
        setIsStarting(false);
        return;
      }

      const mediaRecorder = new MediaRecorder(streamRef.current, {
        mimeType: 'video/webm;codecs=vp9,opus'
      });

      mediaRecorderRef.current = mediaRecorder;
      chunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'video/webm' });
        setRecordedBlob(blob);
        setHasRecorded(true);
        onRecordingComplete(blob);
      };

      mediaRecorder.start(1000);
      setIsRecording(true);
      setTimeRemaining(timeLimit);
      setIsStarting(false);

      timerRef.current = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            stopRecording();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

    } catch (err) {
      setError('Failed to start recording');
      setIsStarting(false);
      console.error('Recording error:', err);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  };

  const handleSubmit = async () => {
    if (!recordedBlob || isSubmitting) return;
    
    setIsSubmitting(true);
    setError('');
    
    try {
      const formData = new FormData();
      formData.append('video', recordedBlob, `video_${questionId}_${Date.now()}.webm`);
      formData.append('sessionId', sessionId);
      formData.append('questionId', questionId);

      const uploadResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/video/upload`, {
        method: 'POST',
        body: formData
      });

      if (!uploadResponse.ok) {
        throw new Error('Video upload failed');
      }

      const uploadData = await uploadResponse.json();
      console.log('Video uploaded successfully:', uploadData);

      const completeResponse = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/interviews/session/${sessionId}/question/${questionId}/complete`,
        { method: 'POST' }
      );
      
      if (completeResponse.ok) {
        setIsCompleted(true);
        onNext();
      } else {
        throw new Error('Failed to mark question as completed');
      }
    } catch (err) {
      console.error('Upload error:', err);
      setError('Upload failed. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (isLoadingProgress) {
    return (
      <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125] mx-auto mb-4"></div>
          <p className="text-gray-600">Loading question progress...</p>
        </div>
      </div>
    );
  }

  if (!hasPermission) {
    return (
      <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-[#DC1125] to-[#052049] text-white p-6">
          <div className="text-center">
            <div className="flex items-center justify-center mb-4">
              <Camera className="h-8 w-8 mr-2" />
              <Mic className="h-8 w-8" />
            </div>
            <h3 className="text-xl font-bold tempo-font tracking-tight mb-2">
              CAMERA ACCESS REQUIRED
            </h3>
            <p className="text-white/90">
              Please allow camera and microphone access to continue with your interview.
            </p>
          </div>
        </div>
        {error && (
          <div className="p-6">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center">
              <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
              <span className="text-sm text-red-700">{error}</span>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Progress Info */}
      {isCompleted && (
        <div className="bg-green-50 border-b border-green-200 p-4">
          <div className="flex items-center text-sm text-green-800">
            <CheckCircle className="w-5 h-5 mr-2" />
            <span className="font-medium tempo-font">QUESTION COMPLETED</span>
          </div>
        </div>
      )}

      {/* Video Display */}
      <div className="relative">
        <div className="relative bg-black rounded-t-lg overflow-hidden">
          <video
            ref={videoRef}
            autoPlay
            muted={!recordedBlob}
            className="w-full h-64 sm:h-80 object-cover"
            controls={!!recordedBlob}
          />
          
          {/* Recording Indicator */}
          {isRecording && (
            <div className="absolute top-4 left-4 bg-[#DC1125] text-white px-4 py-2 rounded-full flex items-center shadow-lg">
              <div className="w-3 h-3 bg-white rounded-full mr-2 animate-pulse"></div>
              <span className="font-bold tempo-font text-sm">RECORDING</span>
            </div>
          )}

          {/* Timer */}
          <div className="absolute top-4 right-4 bg-black/70 text-white px-4 py-2 rounded-full">
            <span className="font-bold tempo-font">{formatTime(timeRemaining)}</span>
          </div>

          {/* Camera Status Overlay */}
          {!isRecording && !recordedBlob && (
            <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
              <div className="text-center text-white">
                <Camera className="w-12 h-12 mx-auto mb-2 opacity-80" />
                <p className="tempo-font font-medium">Ready to Record</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Controls */}
      <div className="p-6">
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          {!recordedBlob ? (
            <div className="flex gap-4 justify-center">
              <button
                onClick={isRecording ? stopRecording : startRecording}
                disabled={!hasPermission || isCompleted || isStarting}
                className={`tempo-font flex items-center gap-3 px-8 py-4 rounded-lg font-bold text-lg transition-all duration-200 shadow-lg ${
                  isRecording
                    ? 'bg-[#DC1125] hover:bg-red-700 text-white'
                    : isCompleted
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : isStarting
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-gradient-to-r from-[#10559A] to-[#052049] hover:from-[#052049] hover:to-[#10559A] text-white transform hover:-translate-y-0.5'
                }`}
              >
                {isStarting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    STARTING...
                  </>
                ) : isRecording ? (
                  <>
                    <Square className="w-6 h-6" />
                    STOP RECORDING
                  </>
                ) : (
                  <>
                    <Play className="w-6 h-6" />
                    {isCompleted ? 'ALREADY ANSWERED' : 'START RECORDING'}
                  </>
                )}
              </button>
            </div>
          ) : (
            <div className="flex gap-4 justify-center">
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className={`tempo-font flex items-center gap-3 px-8 py-4 rounded-lg font-bold text-lg transition-all duration-200 shadow-lg ${
                  isSubmitting 
                    ? 'bg-gray-400 text-white cursor-not-allowed' 
                    : 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white transform hover:-translate-y-0.5'
                }`}
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    SUBMITTING...
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-6 h-6" />
                    SUBMIT & CONTINUE
                  </>
                )}
              </button>
            </div>
          )}
        </div>

        {/* Error Display */}
        {error && (
          <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-4 flex items-center">
            <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
            <span className="text-sm text-red-700">{error}</span>
          </div>
        )}

        {/* Instructions */}
        <div className="mt-6 text-center">
          <div className="bg-[#10559A]/10 border border-[#10559A]/20 rounded-lg p-4">
            <p className="text-sm text-gray-700 leading-relaxed">
              You have <span className="font-bold text-[#052049] tempo-font">{Math.floor(timeLimit / 60)} minute{Math.floor(timeLimit / 60) !== 1 ? 's' : ''} and {timeLimit % 60} seconds</span> to answer this question.
              {!recordedBlob && !isCompleted && (
                <span className="block mt-1 text-[#10559A] font-medium">
                  Click "Start Recording" when you're ready to begin.
                </span>
              )}
              {isCompleted && (
                <span className="block mt-1 text-green-600 font-medium tempo-font">
                  ✅ This question has been completed successfully.
                </span>
              )}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

"use client"
import React, { useState, useEffect } from 'react';
import { ArrowLeft, Play, Eye, Calendar, Clock, User, Mail, CheckCircle, AlertCircle, Filter, X, Search, ArrowUpDown, ChevronUp, ChevronDown, ChevronLeft, ChevronRight } from 'lucide-react';
import { useSearchParams } from 'next/navigation';
import UnifiedHeader from './UnifiedHeader';

interface Session {
  id: string;
  templateId: string;
  candidateEmail: string;
  candidateName: string;
  status: string;
  startedAt: string | null;
  completedAt: string | null;
  expiresAt: string;
  createdAt: string;
  interviewTitle: string;
  interviewDescription: string;
  videosSubmitted: number;
  totalQuestions: number;
}

type SortDirection = 'asc' | 'desc' | null;

interface SortConfig {
  key: string;
  direction: SortDirection;
}

interface DateRange {
  startDate: string;
  endDate: string;
}

export default function VideoReviewDashboard() {
  const searchParams = useSearchParams();
  const templateFilter = searchParams?.get('template') || null;
  
  const [sessions, setSessions] = useState<Session[]>([]);
  const [filteredSessions, setFilteredSessions] = useState<Session[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<any>(null);
  const [error, setError] = useState('');
  
  // Enhanced filtering and search state
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [dateRange, setDateRange] = useState<DateRange>({ startDate: '', endDate: '' });
  const [showFilters, setShowFilters] = useState(false);
  const [templateTitle, setTemplateTitle] = useState('');
  
  // Sorting state
  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'createdAt', direction: 'desc' });
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 15;

  useEffect(() => {
    fetchSessions();
    if (templateFilter) {
      fetchTemplateTitle(templateFilter);
    }
  }, [templateFilter]);

  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      setUser(JSON.parse(userData));
    }
  }, []);

  useEffect(() => {
    filterSessions();
  }, [sessions, statusFilter, searchTerm, templateFilter, dateRange]);

  const fetchSessions = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setSessions(data);
      } else {
        setError('Failed to fetch interview sessions');
      }
    } catch (error) {
      setError('Network error');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchTemplateTitle = async (templateId: string) => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/templates/${templateId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setTemplateTitle(data.title);
      }
    } catch (error) {
      console.error('Failed to fetch template title');
    }
  };

  // Sorting function
  const handleSort = (key: string) => {
    let direction: SortDirection = 'asc';
    if (sortConfig.key === key) {
      if (sortConfig.direction === 'asc') direction = 'desc';
      else if (sortConfig.direction === 'desc') direction = null;
      else direction = 'asc';
    }
    
    setSortConfig({ key, direction });
    setCurrentPage(1);
  };

  const getSortIcon = (key: string) => {
    if (sortConfig.key !== key) {
      return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
    }
    if (sortConfig.direction === 'asc') {
      return <ChevronUp className="w-4 h-4 text-[#DC1125]" />;
    }
    if (sortConfig.direction === 'desc') {
      return <ChevronDown className="w-4 h-4 text-[#DC1125]" />;
    }
    return <ArrowUpDown className="w-4 h-4 text-gray-400" />;
  };

  const filterSessions = () => {
    let filtered = sessions;

    // Filter by template if specified
    if (templateFilter) {
      filtered = filtered.filter(session => session.templateId === templateFilter);
    }

    // Filter by status
    if (statusFilter !== 'all') {
      filtered = filtered.filter(session => {
        if (statusFilter === 'completed') {
          return session.status === 'completed' || session.videosSubmitted === session.totalQuestions;
        }
        if (statusFilter === 'in_progress') {
          return session.status === 'in_progress' && session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
        }
        if (statusFilter === 'pending') {
          return session.status === 'pending' || session.videosSubmitted === 0;
        }
        return session.status === statusFilter;
      });
    }

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(session => 
        session.candidateName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.candidateEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.interviewTitle.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Date range filter
    if (dateRange.startDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) >= new Date(dateRange.startDate)
      );
    }
    if (dateRange.endDate) {
      filtered = filtered.filter(session => 
        new Date(session.createdAt) <= new Date(dateRange.endDate + 'T23:59:59')
      );
    }

    // Apply sorting
    if (sortConfig.direction) {
      filtered.sort((a, b) => {
        let aValue: any = a[sortConfig.key as keyof Session];
        let bValue: any = b[sortConfig.key as keyof Session];

        if (sortConfig.key === 'createdAt') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        } else if (typeof aValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        if (sortConfig.direction === 'asc') {
          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
        } else {
          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
        }
      });
    }

    setFilteredSessions(filtered);
  };

  // Pagination logic
  const getPaginatedData = (data: Session[]) => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return {
      data: data.slice(startIndex, endIndex),
      totalPages: Math.ceil(data.length / itemsPerPage),
      totalItems: data.length
    };
  };

  const getStatusBadge = (session: Session) => {
    const completed = session.videosSubmitted === session.totalQuestions && session.totalQuestions > 0;
    const inProgress = session.videosSubmitted > 0 && session.videosSubmitted < session.totalQuestions;
    
    if (completed) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800 tempo-font">COMPLETED</span>;
    } else if (inProgress) {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800 tempo-font">IN PROGRESS</span>;
    } else {
      return <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800 tempo-font">PENDING</span>;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const clearTemplateFilter = () => {
    window.location.href = '/review';
  };

  const reviewSession = (sessionId: string) => {
    window.location.href = `/review/${sessionId}`;
  };

  const SortableHeader = ({ label, sortKey }: { label: string; sortKey: string }) => (
    <th className="px-6 py-3 text-left text-xs font-bold text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors tempo-font">
      <button
        onClick={() => handleSort(sortKey)}
        className="flex items-center space-x-1 w-full text-left"
      >
        <span>{label}</span>
        {getSortIcon(sortKey)}
      </button>
    </th>
  );

  const paginatedData = getPaginatedData(filteredSessions);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader currentPage="evaluations" user={user} />
        <div className="flex items-center justify-center py-20">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC1125]"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <UnifiedHeader currentPage="evaluations" user={user} />
      
      {/* Template Filter Indicator */}
      {templateFilter && templateTitle && (
        <div className="bg-white border-b border-gray-200 px-4 sm:px-6 lg:px-8 py-2">
          <div className="max-w-7xl mx-auto">
            <div className="bg-[#10559A]/10 text-[#10559A] px-3 py-1 rounded-full text-sm font-bold tempo-font tracking-tight inline-flex items-center border border-[#10559A]/20">
              <Filter className="w-3 h-3 mr-1" />
              FILTERED BY: {templateTitle.toUpperCase()}
              <button
                onClick={clearTemplateFilter}
                className="ml-2 text-[#DC1125] hover:text-red-800 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Carnival-Styled Filters */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-4 border-b border-gray-200 bg-[#10559A]">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-bold text-white tempo-font tracking-tight">VIDEO EVALUATION FILTERS</h3>
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="inline-flex items-center px-3 py-2 border border-white/30 shadow-sm text-sm font-bold rounded-md text-white bg-white/10 hover:bg-white/20 tempo-font transition-colors"
              >
                <Filter className="w-4 h-4 mr-2" />
                {showFilters ? 'HIDE FILTERS' : 'SHOW FILTERS'}
              </button>
            </div>
          </div>

          {showFilters && (
            <div className="p-6 space-y-4">
              {/* Search Bar */}
              <div>
                <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                  SEARCH CANDIDATES
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125] focus:border-[#DC1125]"
                    placeholder="Search by name, email, or interview title..."
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                {/* Status Filter */}
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    STATUS
                  </label>
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  >
                    <option value="all">All Status</option>
                    <option value="completed">Completed</option>
                    <option value="in_progress">In Progress</option>
                    <option value="pending">Pending</option>
                  </select>
                </div>

                {/* Date Range */}
                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    START DATE
                  </label>
                  <input
                    type="date"
                    value={dateRange.startDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-[#052049] mb-2 tempo-font tracking-tight">
                    END DATE
                  </label>
                  <input
                    type="date"
                    value={dateRange.endDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#DC1125]"
                  />
                </div>

                <div className="flex items-end">
                  {templateFilter && (
                    <button
                      onClick={clearTemplateFilter}
                      className="w-full px-4 py-2 text-sm font-bold text-[#DC1125] bg-[#DC1125]/10 hover:bg-[#DC1125]/20 rounded-md border border-[#DC1125]/20 tempo-font transition-colors"
                    >
                      SHOW ALL TEMPLATES
                    </button>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Sessions Table */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200 bg-[#052049]">
            <h2 className="text-2xl font-bold text-white tempo-font tracking-tight">
              VIDEO EVALUATIONS ({filteredSessions.length})
            </h2>
            {templateFilter && templateTitle && (
              <p className="text-sm text-white/90 mt-1">
                Filtered by: {templateTitle}
              </p>
            )}
          </div>

          {error && (
            <div className="p-6 bg-red-50 border-b border-red-200">
              <span className="text-sm text-red-700">{error}</span>
            </div>
          )}

          {paginatedData.data.length === 0 ? (
            <div className="text-center py-12">
              <Play className="mx-auto h-12 w-12 text-[#DC1125]/60" />
              <h3 className="mt-2 text-lg font-bold text-[#052049] tempo-font tracking-tight">
                NO EVALUATIONS FOUND
              </h3>
              <p className="mt-1 text-sm text-gray-500">
                {sessions.length === 0 
                  ? "No candidates have completed interviews yet."
                  : templateFilter
                  ? "No sessions found for this template. Try adjusting your search criteria."
                  : "Try adjusting your search or filter criteria."
                }
              </p>
              {templateFilter && (
                <div className="mt-4">
                  <button
                    onClick={clearTemplateFilter}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-bold rounded-md text-white bg-[#10559A] hover:bg-[#052049] tempo-font transition-colors"
                  >
                    VIEW ALL SESSIONS
                  </button>
                </div>
              )}
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <SortableHeader label="CANDIDATE" sortKey="candidateName" />
                      <SortableHeader label="STATUS" sortKey="status" />
                      <SortableHeader label="INTERVIEW DATE" sortKey="createdAt" />
                      <SortableHeader label="POSITION" sortKey="interviewTitle" />
                      <SortableHeader label="PROGRESS" sortKey="videosSubmitted" />
                      <th className="px-6 py-3 text-right text-xs font-bold text-gray-500 uppercase tracking-wider tempo-font">ACTIONS</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {paginatedData.data.map((session) => (
                      <tr key={session.id} className="hover:bg-[#10559A]/5 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-bold text-[#052049] tempo-font">{session.candidateName}</div>
                            <div className="text-sm text-gray-500">{session.candidateEmail}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {getStatusBadge(session)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                          {formatDate(session.createdAt)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">{session.interviewTitle}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-bold text-gray-900 tempo-font">
                            {session.videosSubmitted}/{session.totalQuestions} VIDEOS
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                            <div 
                              className="bg-gradient-to-r from-[#10559A] to-[#DC1125] h-2 rounded-full transition-all duration-300"
                              style={{ 
                                width: `${session.totalQuestions > 0 ? (session.videosSubmitted / session.totalQuestions) * 100 : 0}%` 
                              }}
                            ></div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => reviewSession(session.id)}
                            disabled={session.videosSubmitted === 0}
                            className={`tempo-font font-bold transition-colors ${
                              session.videosSubmitted > 0
                                ? 'text-[#10559A] hover:text-[#052049]'
                                : 'text-gray-400 cursor-not-allowed'
                            }`}
                          >
                            <div className="flex items-center">
                              <Eye className="w-4 h-4 mr-1" />
                              {session.videosSubmitted > 0 ? 'REVIEW' : 'NO VIDEOS'}
                            </div>
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              {/* Carnival-styled Pagination */}
              <div className="flex items-center justify-between px-6 py-3 bg-white border-t border-gray-200">
                <div className="flex-1 flex justify-between sm:hidden">
                  <button
                    onClick={() => setCurrentPage(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(currentPage + 1)}
                    disabled={currentPage === paginatedData.totalPages}
                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Next
                  </button>
                </div>
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700 tempo-font">
                      Showing <span className="font-bold text-[#052049]">{((currentPage - 1) * itemsPerPage) + 1}</span> to{' '}
                      <span className="font-bold text-[#052049]">{Math.min(currentPage * itemsPerPage, paginatedData.totalItems)}</span> of{' '}
                      <span className="font-bold text-[#052049]">{paginatedData.totalItems}</span> evaluations
                    </p>
                  </div>
                  <div>
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                      <button
                        onClick={() => setCurrentPage(currentPage - 1)}
                        disabled={currentPage === 1}
                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronLeft className="h-5 w-5" />
                      </button>
                      
                      {Array.from({ length: Math.min(paginatedData.totalPages, 5) }, (_, i) => {
                        const page = i + 1;
                        return (
                          <button
                            key={page}
                            onClick={() => setCurrentPage(page)}
                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-bold tempo-font ${
                              page === currentPage
                                ? 'z-10 bg-[#DC1125] border-[#DC1125] text-white'
                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                            }`}
                          >
                            {page}
                          </button>
                        );
                      })}
                      
                      <button
                        onClick={() => setCurrentPage(currentPage + 1)}
                        disabled={currentPage === paginatedData.totalPages}
                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronRight className="h-5 w-5" />
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

// frontend/src/components/VideoReviewInterface.tsz

"use client"
import React, { useState, useEffect, useRef } from 'react';
import { ArrowLeft, Play, Pause, Volume2, VolumeX, Download, Star, Save, MessageSquare, ChevronLeft, ChevronRight, Clock, User, Mail, CheckCircle } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useSearchParams } from 'next/navigation';

interface Video {
  id: string;
  fileName: string;
  stagePath: string;        // Keep for old videos
  r2Key?: string;          // NEW: Optional for new videos
  r2Url?: string;          // NEW: Optional for new videos  
  fileSize: number;
  uploadStatus: string;
  createdAt: string;
}

interface Question {
  questionId: string;
  questionText: string;
  timeLimit: number;
  questionOrder: number;
  video: Video | null;
}

interface Session {
  id: string;
  templateId: string;
  candidateEmail: string;
  candidateName: string;
  status: string;
  startedAt: string | null;
  completedAt: string | null;
  createdAt: string;
  interviewTitle: string;
  interviewDescription: string;
}

interface ReviewData {
  session: Session;
  questions: Question[];
}

interface Evaluation {
  id: string;
  session_id: string;
  question_id: string;
  rating: number | null;
  notes: string;
  evaluated_by: string;
  created_at: string;
  updated_at: string;
}

interface KeywordMatch {
  keyword: string;
  category: string;
  weight: number;
  matchCount: number;
  positions: number[];
}

interface TranscriptData {
  id: string;
  text: string;
  confidence: number;
  wordCount: number;
  processingStatus: string;
  createdAt: string;
}

interface TranscriptResponse {
  transcript: TranscriptData | null;
  keywordMatches: KeywordMatch[];
  totalKeywords: number;
  matchedKeywords: number;
  message?: string;
}

interface KeywordSummary {
  sessionId: string;
  templateTitle: string;
  totalQuestions: number;
  totalKeywords: number;
  overallScore: number | null;
  technicalScore: number | null;
  softSkillsScore: number | null;
  experienceScore: number | null;
  lastCalculated: string | null;
  transcriptionStatus: string;
}

export default function VideoReviewInterface({ sessionId }: { sessionId: string }) {
  const [reviewData, setReviewData] = useState<ReviewData | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  
  // Evaluation state
  const [rating, setRating] = useState<number>(0);
  const [notes, setNotes] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState('');
  const [evaluations, setEvaluations] = useState<{[questionId: string]: Evaluation}>({});

  // AI Analysis state
  const [transcriptData, setTranscriptData] = useState<TranscriptResponse | null>(null);
  const [keywordSummary, setKeywordSummary] = useState<KeywordSummary | null>(null);
  const [isLoadingTranscript, setIsLoadingTranscript] = useState(false);
  const [showTranscript, setShowTranscript] = useState(true);

  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    fetchReviewData();
  }, [sessionId]);

  useEffect(() => {
    // Find first question with video when data loads
    if (reviewData && reviewData.questions.length > 0) {
      const firstVideoIndex = reviewData.questions.findIndex(q => q.video !== null);
      if (firstVideoIndex !== -1) {
        setCurrentQuestionIndex(firstVideoIndex);
      }
    }
  }, [reviewData]);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const updateTime = () => setCurrentTime(video.currentTime);
    const updateDuration = () => setDuration(video.duration);
    const handleEnded = () => setIsPlaying(false);

    video.addEventListener('timeupdate', updateTime);
    video.addEventListener('loadedmetadata', updateDuration);
    video.addEventListener('ended', handleEnded);

    return () => {
      video.removeEventListener('timeupdate', updateTime);
      video.removeEventListener('loadedmetadata', updateDuration);
      video.removeEventListener('ended', handleEnded);
    };
  }, [currentQuestionIndex]);

  // Load evaluation when question changes
  useEffect(() => {
    if (reviewData && reviewData.questions[currentQuestionIndex]) {
      loadEvaluationForCurrentQuestion();
    }
  }, [currentQuestionIndex, reviewData]);

  // Load transcript when question changes
  useEffect(() => {
    if (reviewData && reviewData.questions[currentQuestionIndex]) {
      const currentQuestion = reviewData.questions[currentQuestionIndex];
      loadTranscriptData(currentQuestion.questionId);
    }
  }, [currentQuestionIndex, reviewData]);

  // Load keyword summary on mount
  useEffect(() => {
    loadKeywordSummary();
  }, [sessionId]);

  const fetchReviewData = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions/${sessionId}/review`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        setReviewData(data);
        // Load all evaluations for this session
        loadSessionEvaluations();
      } else {
        setError('Failed to load interview data');
      }
    } catch (error) {
      setError('Network error');
    } finally {
      setIsLoading(false);
    }
  };

  const loadSessionEvaluations = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions/${sessionId}/evaluations`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        const evaluationMap: {[questionId: string]: Evaluation} = {};
        data.evaluations.forEach((evaluation: Evaluation) => {
          evaluationMap[evaluation.question_id] = evaluation;
        });
        setEvaluations(evaluationMap);
      }
    } catch (error) {
      console.error('Failed to load evaluations:', error);
    }
  };

  const loadEvaluationForCurrentQuestion = () => {
    const currentQuestion = reviewData?.questions[currentQuestionIndex];
    if (!currentQuestion) return;

    const evaluation = evaluations[currentQuestion.questionId];
    if (evaluation) {
      setRating(evaluation.rating || 0);
      setNotes(evaluation.notes || '');
    } else {
      setRating(0);
      setNotes('');
    }
    setSaveMessage('');
  };

  const loadTranscriptData = async (questionId: string) => {
    setIsLoadingTranscript(true);
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions/${sessionId}/questions/${questionId}/transcript`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setTranscriptData(data);
      } else {
        console.error('Failed to load transcript data');
        setTranscriptData(null);
      }
    } catch (error) {
      console.error('Error loading transcript:', error);
      setTranscriptData(null);
    } finally {
      setIsLoadingTranscript(false);
    }
  };

  const loadKeywordSummary = async () => {
    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions/${sessionId}/keyword-summary`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setKeywordSummary(data);
      }
    } catch (error) {
      console.error('Error loading keyword summary:', error);
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technical': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'soft_skills': return 'bg-green-100 text-green-800 border-green-200';
      case 'experience': return 'bg-purple-100 text-purple-800 border-purple-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical': return '🔧';
      case 'soft_skills': return '🤝';
      case 'experience': return '💼';
      default: return '📋';
    }
  };

  const saveEvaluation = async () => {
    const currentQuestion = reviewData?.questions[currentQuestionIndex];
    if (!currentQuestion) return;

    setIsSaving(true);
    setSaveMessage('');

    try {
      const token = localStorage.getItem('authToken');
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/api/admin/sessions/${sessionId}/questions/${currentQuestion.questionId}/evaluation`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({
            rating: rating || null,
            notes: notes.trim()
          })
        }
      );

      if (response.ok) {
        const data = await response.json();
        // Update local evaluations state
        setEvaluations(prev => ({
          ...prev,
          [currentQuestion.questionId]: data.evaluation
        }));
        setSaveMessage('Evaluation saved successfully!');
        setTimeout(() => setSaveMessage(''), 3000);
      } else {
        const errorData = await response.json();
        setSaveMessage(errorData.error || 'Failed to save evaluation');
      }
    } catch (error) {
      setSaveMessage('Network error. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const togglePlayPause = () => {
    const video = videoRef.current;
    if (!video) return;

    if (isPlaying) {
      video.pause();
    } else {
      video.play();
    }
    setIsPlaying(!isPlaying);
  };

  const toggleMute = () => {
    const video = videoRef.current;
    if (!video) return;

    video.muted = !isMuted;
    setIsMuted(!isMuted);
  };

  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const video = videoRef.current;
    if (!video) return;

    const seekTime = (parseFloat(e.target.value) / 100) * duration;
    video.currentTime = seekTime;
    setCurrentTime(seekTime);
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const goToQuestion = (index: number) => {
    if (reviewData && index >= 0 && index < reviewData.questions.length) {
      setCurrentQuestionIndex(index);
      setIsPlaying(false);
      setCurrentTime(0);
    }
  };

  const downloadVideo = () => {
    const currentQuestion = reviewData?.questions[currentQuestionIndex];
    if (!currentQuestion?.video || !reviewData) return;

    const downloadUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/video/download/${reviewData.session.id}/${currentQuestion.questionId}/${currentQuestion.video.fileName}`;
    
    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = currentQuestion.video.fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const goBack = () => {
    window.location.href = '/review';
  };

  const hasEvaluation = (questionId: string) => {
    return evaluations[questionId] !== undefined;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error || !reviewData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Unable to load review data</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={goBack}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Review
          </button>
        </div>
      </div>
    );
  }

  const currentQuestion = reviewData.questions[currentQuestionIndex];
  const hasVideo = currentQuestion?.video !== null;
  const videosWithContent = reviewData.questions.filter(q => q.video !== null);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <button
                onClick={goBack}
                className="flex items-center text-gray-600 hover:text-gray-900 mr-4"
              >
                <ArrowLeft className="h-5 w-5 mr-1" />
                Back to Review
              </button>
              <h1 className="text-xl font-semibold text-gray-900">Video Review</h1>
            </div>
            <div className="text-right">
              <div className="text-sm font-medium text-gray-900">{reviewData.session.candidateName}</div>
              <div className="text-xs text-gray-500">{reviewData.session.interviewTitle}</div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Video Player Section */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-lg overflow-hidden">
              {/* Question Header */}
              <div className="px-6 py-4 bg-blue-50 border-b">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-medium text-gray-900">
                    Question {currentQuestion.questionOrder}
                  </h2>
                  <div className="flex items-center text-sm text-gray-600">
                    <Clock className="w-4 h-4 mr-1" />
                    {Math.floor(currentQuestion.timeLimit / 60)}:{(currentQuestion.timeLimit % 60).toString().padStart(2, '0')} limit
                  </div>
                </div>
                <p className="mt-2 text-gray-700">{currentQuestion.questionText}</p>
              </div>

              {/* Video Player */}
              <div className="relative bg-black">
                {hasVideo ? (
                  <>
                    <video
                      ref={videoRef}
                      className="w-full h-96 object-contain"
                      src={currentQuestion.video?.r2Url || `${process.env.NEXT_PUBLIC_API_URL}/api/video/download/${reviewData.session.id}/${currentQuestion.questionId}/${currentQuestion.video!.fileName}`}
                      onPlay={() => setIsPlaying(true)}
                      onPause={() => setIsPlaying(false)}
                    />
                    
                    {/* Video Controls */}
                    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
                      <div className="flex items-center space-x-4">
                        <button
                          onClick={togglePlayPause}
                          className="text-white hover:text-blue-300"
                        >
                          {isPlaying ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
                        </button>
                        
                        <div className="flex-1">
                          <input
                            type="range"
                            min="0"
                            max="100"
                            value={duration > 0 ? (currentTime / duration) * 100 : 0}
                            onChange={handleSeek}
                            className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                          />
                        </div>
                        
                        <span className="text-white text-sm">
                          {formatTime(currentTime)} / {formatTime(duration)}
                        </span>
                        
                        <button
                          onClick={toggleMute}
                          className="text-white hover:text-blue-300"
                        >
                          {isMuted ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
                        </button>
                        
                        <button
                          onClick={downloadVideo}
                          className="text-white hover:text-blue-300"
                        >
                          <Download className="w-5 h-5" />
                        </button>
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="flex items-center justify-center h-96 text-gray-400">
                    <div className="text-center">
                      <Play className="w-12 h-12 mx-auto mb-4" />
                      <p className="text-lg">No video response for this question</p>
                    </div>
                  </div>
                )}
              </div>

              {/* Navigation */}
              <div className="px-6 py-4 bg-gray-50 border-t">
                <div className="flex items-center justify-between">
                  <button
                    onClick={() => goToQuestion(currentQuestionIndex - 1)}
                    disabled={currentQuestionIndex === 0}
                    className="flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <ChevronLeft className="w-4 h-4 mr-1" />
                    Previous
                  </button>
                  
                  <span className="text-sm text-gray-600">
                    {currentQuestionIndex + 1} of {reviewData.questions.length} questions
                  </span>
                  
                  <button
                    onClick={() => goToQuestion(currentQuestionIndex + 1)}
                    disabled={currentQuestionIndex === reviewData.questions.length - 1}
                    className="flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Next
                    <ChevronRight className="w-4 h-4 ml-1" />
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Candidate Info */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Candidate Information</h3>
              <div className="space-y-3">
                <div className="flex items-center">
                  <User className="w-4 h-4 text-gray-400 mr-3" />
                  <span className="text-sm text-gray-900">{reviewData.session.candidateName}</span>
                </div>
                <div className="flex items-center">
                  <Mail className="w-4 h-4 text-gray-400 mr-3" />
                  <span className="text-sm text-gray-600">{reviewData.session.candidateEmail}</span>
                </div>
                <div className="flex items-center">
                  <Clock className="w-4 h-4 text-gray-400 mr-3" />
                  <span className="text-sm text-gray-600">
                    Completed: {new Date(reviewData.session.createdAt).toLocaleDateString()}
                  </span>
                </div>
              </div>
            </div>

            {/* Question Navigation */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Questions</h3>
              <div className="space-y-2">
                {reviewData.questions.map((question, index) => (
                  <button
                    key={question.questionId}
                    onClick={() => goToQuestion(index)}
                    className={`w-full text-left p-3 rounded-lg border transition-colors ${
                      index === currentQuestionIndex
                        ? 'bg-blue-50 border-blue-200 text-blue-900'
                        : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Q{question.questionOrder}</span>
                      <div className="flex items-center space-x-1">
                        {question.video ? (
                          <Play className="w-4 h-4 text-green-600" />
                        ) : (
                          <div className="w-4 h-4 bg-gray-300 rounded-full" />
                        )}
                        {hasEvaluation(question.questionId) && (
                          <CheckCircle className="w-4 h-4 text-blue-600" />
                        )}
                      </div>
                    </div>
                    <p className="text-xs text-gray-600 mt-1 truncate">
                      {question.questionText}
                    </p>
                  </button>
                ))}
              </div>
            </div>
{/* AI Analysis Section */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">AI Analysis</h3>
              
              {/* Overall Scores */}
              {keywordSummary && (
                <div className="mb-4">
                  <div className="grid grid-cols-2 gap-3 mb-3">
                    {keywordSummary.overallScore !== null && (
                      <div className="text-center p-3 bg-blue-50 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {Math.round(keywordSummary.overallScore)}%
                        </div>
                        <div className="text-xs text-blue-600">Overall</div>
                      </div>
                    )}
                    {keywordSummary.technicalScore !== null && (
                      <div className="text-center p-3 bg-purple-50 rounded-lg">
                        <div className="text-2xl font-bold text-purple-600">
                          {Math.round(keywordSummary.technicalScore)}%
                        </div>
                        <div className="text-xs text-purple-600">Technical</div>
                      </div>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 gap-3">
                    {keywordSummary.softSkillsScore !== null && (
                      <div className="text-center p-3 bg-green-50 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {Math.round(keywordSummary.softSkillsScore)}%
                        </div>
                        <div className="text-xs text-green-600">Soft Skills</div>
                      </div>
                    )}
                    {keywordSummary.experienceScore !== null && (
                      <div className="text-center p-3 bg-yellow-50 rounded-lg">
                        <div className="text-2xl font-bold text-yellow-600">
                          {Math.round(keywordSummary.experienceScore)}%
                        </div>
                        <div className="text-xs text-yellow-600">Experience</div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Keywords Found */}
              {transcriptData && (
                <div className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="text-sm font-medium text-gray-700">Keywords Found</h4>
                    <span className="text-xs text-gray-500">
                      {transcriptData.matchedKeywords} of {transcriptData.totalKeywords}
                    </span>
                  </div>
                  
                  {transcriptData.keywordMatches.length > 0 ? (
                    <div className="space-y-2">
                      {transcriptData.keywordMatches.map((match, index) => (
                        <div key={index} className={`flex items-center justify-between p-2 rounded-lg border ${getCategoryColor(match.category)}`}>
                          <div className="flex items-center">
                            <span className="mr-2">{getCategoryIcon(match.category)}</span>
                            <span className="text-sm font-medium">{match.keyword}</span>
                            {match.weight > 1 && (
                              <span className="ml-1 text-xs">({match.weight}x)</span>
                            )}
                          </div>
                          <span className="text-xs bg-white bg-opacity-50 px-2 py-1 rounded-full">
                            {match.matchCount}x
                          </span>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4 text-gray-500">
                      <span className="text-sm">No keywords found in this response</span>
                    </div>
                  )}
                </div>
              )}

              {/* Transcript Toggle */}
              <button
                onClick={() => setShowTranscript(!showTranscript)}
                className="w-full text-left text-sm font-medium text-blue-600 hover:text-blue-800 mb-2"
              >
                {showTranscript ? '↑ Hide Transcript' : '↓ Show Transcript'}
              </button>

              {/* Transcript Display */}
              {showTranscript && (
                <div className="border rounded-lg p-3 bg-gray-50">
                  {isLoadingTranscript ? (
                    <div className="text-center py-4">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mx-auto mb-2"></div>
                      <span className="text-xs text-gray-500">Loading transcript...</span>
                    </div>
                  ) : transcriptData?.transcript ? (
                    <div>
                      <div className="text-xs text-gray-500 mb-2 flex justify-between">
                        <span>Confidence: {Math.round((transcriptData.transcript.confidence || 0) * 100)}%</span>
                        <span>{transcriptData.transcript.wordCount} words</span>
                      </div>
                      <div className="text-sm text-gray-800 leading-relaxed">
                        {transcriptData.transcript.text || 'No transcript available'}
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-4 text-gray-500">
                      <span className="text-sm">
                        {transcriptData?.message || 'Transcript not available'}
                      </span>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Rating & Notes */}
            {hasVideo && (
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Evaluation</h3>
                
                {/* Star Rating */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Rating</label>
                  <div className="flex space-x-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <button
                        key={star}
                        onClick={() => setRating(star)}
                        className={`${
                          star <= rating ? 'text-yellow-400' : 'text-gray-300'
                        } hover:text-yellow-400 transition-colors`}
                      >
                        <Star className="w-6 h-6 fill-current" />
                      </button>
                    ))}
                  </div>
                  {rating > 0 && (
                    <p className="text-sm text-gray-600 mt-1">{rating} out of 5 stars</p>
                  )}
                </div>

                {/* Notes */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                  <textarea
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Add your evaluation notes..."
                  />
                </div>

                {/* Save Message */}
                {saveMessage && (
                  <div className={`mb-4 p-3 rounded-md text-sm ${
                    saveMessage.includes('success') 
                      ? 'bg-green-50 text-green-800 border border-green-200'
                      : 'bg-red-50 text-red-800 border border-red-200'
                  }`}>
                    {saveMessage}
                  </div>
                )}

                {/* Save Button */}
                <button 
                  onClick={saveEvaluation}
                  disabled={isSaving}
                  className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isSaving ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4 mr-2" />
                      {hasEvaluation(currentQuestion.questionId) ? 'Update Evaluation' : 'Save Evaluation'}
                    </>
                  )}
                </button>
              </div>
            )}

            {/* Interview Summary */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Interview Summary</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Total Questions:</span>
                  <span className="font-medium">{reviewData.questions.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Videos Submitted:</span>
                  <span className="font-medium text-green-600">{videosWithContent.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Completion Rate:</span>
                  <span className="font-medium">
                    {Math.round((videosWithContent.length / reviewData.questions.length) * 100)}%
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Evaluations:</span>
                  <span className="font-medium text-blue-600">
                    {Object.keys(evaluations).length} of {videosWithContent.length}
                  </span>
                </div>
                {keywordSummary && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">AI Score:</span>
                    <span className="font-medium text-purple-600">
                      {keywordSummary.overallScore !== null ? `${Math.round(keywordSummary.overallScore)}%` : 'Pending'}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
















